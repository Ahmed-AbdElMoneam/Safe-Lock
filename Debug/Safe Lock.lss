
Safe Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000170a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  0000170a  0000179e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000e8  008000e8  00001826  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d04  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb0  00000000  00000000  0000474c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001120  00000000  00000000  000052fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  0000641c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006de  00000000  00000000  00006784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f9e  00000000  00000000  00006e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008e00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	51 01       	movw	r10, r2
      56:	6a 01       	movw	r12, r20
      58:	83 01       	movw	r16, r6
      5a:	9c 01       	movw	r18, r24
      5c:	b4 01       	movw	r22, r8
      5e:	b4 01       	movw	r22, r8
      60:	b4 01       	movw	r22, r8
      62:	b4 01       	movw	r22, r8
      64:	b4 01       	movw	r22, r8
      66:	b4 01       	movw	r22, r8
      68:	b4 01       	movw	r22, r8
      6a:	b4 01       	movw	r22, r8
      6c:	b4 01       	movw	r22, r8
      6e:	b4 01       	movw	r22, r8
      70:	b4 01       	movw	r22, r8
      72:	b4 01       	movw	r22, r8
      74:	b4 01       	movw	r22, r8
      76:	b4 01       	movw	r22, r8
      78:	b4 01       	movw	r22, r8
      7a:	b4 01       	movw	r22, r8
      7c:	b4 01       	movw	r22, r8
      7e:	b4 01       	movw	r22, r8
      80:	b4 01       	movw	r22, r8
      82:	b4 01       	movw	r22, r8
      84:	b4 01       	movw	r22, r8
      86:	b4 01       	movw	r22, r8
      88:	b4 01       	movw	r22, r8
      8a:	b4 01       	movw	r22, r8
      8c:	b4 01       	movw	r22, r8
      8e:	b4 01       	movw	r22, r8
      90:	b4 01       	movw	r22, r8
      92:	b4 01       	movw	r22, r8
      94:	51 01       	movw	r10, r2
      96:	6a 01       	movw	r12, r20
      98:	83 01       	movw	r16, r6
      9a:	9c 01       	movw	r18, r24
      9c:	c0 01       	movw	r24, r0
      9e:	c2 01       	movw	r24, r4
      a0:	c4 01       	movw	r24, r8
      a2:	c6 01       	movw	r24, r12
      a4:	c7 01       	movw	r24, r14
      a6:	c7 01       	movw	r24, r14
      a8:	c7 01       	movw	r24, r14
      aa:	c7 01       	movw	r24, r14
      ac:	c7 01       	movw	r24, r14
      ae:	c7 01       	movw	r24, r14
      b0:	c7 01       	movw	r24, r14
      b2:	c7 01       	movw	r24, r14
      b4:	c7 01       	movw	r24, r14
      b6:	c7 01       	movw	r24, r14
      b8:	c7 01       	movw	r24, r14
      ba:	c7 01       	movw	r24, r14
      bc:	c7 01       	movw	r24, r14
      be:	c7 01       	movw	r24, r14
      c0:	c7 01       	movw	r24, r14
      c2:	c7 01       	movw	r24, r14
      c4:	c7 01       	movw	r24, r14
      c6:	c7 01       	movw	r24, r14
      c8:	c7 01       	movw	r24, r14
      ca:	c7 01       	movw	r24, r14
      cc:	c7 01       	movw	r24, r14
      ce:	c7 01       	movw	r24, r14
      d0:	c7 01       	movw	r24, r14
      d2:	c7 01       	movw	r24, r14
      d4:	c7 01       	movw	r24, r14
      d6:	c7 01       	movw	r24, r14
      d8:	c7 01       	movw	r24, r14
      da:	c7 01       	movw	r24, r14
      dc:	c0 01       	movw	r24, r0
      de:	c2 01       	movw	r24, r4
      e0:	c4 01       	movw	r24, r8
      e2:	c6 01       	movw	r24, r12
      e4:	d4 01       	movw	r26, r8
      e6:	ed 01       	movw	r28, r26
      e8:	06 02       	muls	r16, r22
      ea:	1f 02       	muls	r17, r31
      ec:	37 02       	muls	r19, r23
      ee:	37 02       	muls	r19, r23
      f0:	37 02       	muls	r19, r23
      f2:	37 02       	muls	r19, r23
      f4:	37 02       	muls	r19, r23
      f6:	37 02       	muls	r19, r23
      f8:	37 02       	muls	r19, r23
      fa:	37 02       	muls	r19, r23
      fc:	37 02       	muls	r19, r23
      fe:	37 02       	muls	r19, r23
     100:	37 02       	muls	r19, r23
     102:	37 02       	muls	r19, r23
     104:	37 02       	muls	r19, r23
     106:	37 02       	muls	r19, r23
     108:	37 02       	muls	r19, r23
     10a:	37 02       	muls	r19, r23
     10c:	37 02       	muls	r19, r23
     10e:	37 02       	muls	r19, r23
     110:	37 02       	muls	r19, r23
     112:	37 02       	muls	r19, r23
     114:	37 02       	muls	r19, r23
     116:	37 02       	muls	r19, r23
     118:	37 02       	muls	r19, r23
     11a:	37 02       	muls	r19, r23
     11c:	37 02       	muls	r19, r23
     11e:	37 02       	muls	r19, r23
     120:	37 02       	muls	r19, r23
     122:	37 02       	muls	r19, r23
     124:	d4 01       	movw	r26, r8
     126:	ed 01       	movw	r28, r26
     128:	06 02       	muls	r16, r22
     12a:	1f 02       	muls	r17, r31
     12c:	43 02       	muls	r20, r19
     12e:	45 02       	muls	r20, r21
     130:	47 02       	muls	r20, r23
     132:	49 02       	muls	r20, r25
     134:	4a 02       	muls	r20, r26
     136:	4a 02       	muls	r20, r26
     138:	4a 02       	muls	r20, r26
     13a:	4a 02       	muls	r20, r26
     13c:	4a 02       	muls	r20, r26
     13e:	4a 02       	muls	r20, r26
     140:	4a 02       	muls	r20, r26
     142:	4a 02       	muls	r20, r26
     144:	4a 02       	muls	r20, r26
     146:	4a 02       	muls	r20, r26
     148:	4a 02       	muls	r20, r26
     14a:	4a 02       	muls	r20, r26
     14c:	4a 02       	muls	r20, r26
     14e:	4a 02       	muls	r20, r26
     150:	4a 02       	muls	r20, r26
     152:	4a 02       	muls	r20, r26
     154:	4a 02       	muls	r20, r26
     156:	4a 02       	muls	r20, r26
     158:	4a 02       	muls	r20, r26
     15a:	4a 02       	muls	r20, r26
     15c:	4a 02       	muls	r20, r26
     15e:	4a 02       	muls	r20, r26
     160:	4a 02       	muls	r20, r26
     162:	4a 02       	muls	r20, r26
     164:	4a 02       	muls	r20, r26
     166:	4a 02       	muls	r20, r26
     168:	4a 02       	muls	r20, r26
     16a:	4a 02       	muls	r20, r26
     16c:	43 02       	muls	r20, r19
     16e:	45 02       	muls	r20, r21
     170:	47 02       	muls	r20, r23
     172:	49 02       	muls	r20, r25
     174:	57 02       	muls	r21, r23
     176:	69 02       	muls	r22, r25
     178:	7b 02       	muls	r23, r27
     17a:	8d 02       	muls	r24, r29
     17c:	9f 02       	muls	r25, r31
     17e:	9f 02       	muls	r25, r31
     180:	9f 02       	muls	r25, r31
     182:	9f 02       	muls	r25, r31
     184:	9f 02       	muls	r25, r31
     186:	9f 02       	muls	r25, r31
     188:	9f 02       	muls	r25, r31
     18a:	9f 02       	muls	r25, r31
     18c:	9f 02       	muls	r25, r31
     18e:	9f 02       	muls	r25, r31
     190:	9f 02       	muls	r25, r31
     192:	9f 02       	muls	r25, r31
     194:	9f 02       	muls	r25, r31
     196:	9f 02       	muls	r25, r31
     198:	9f 02       	muls	r25, r31
     19a:	9f 02       	muls	r25, r31
     19c:	9f 02       	muls	r25, r31
     19e:	9f 02       	muls	r25, r31
     1a0:	9f 02       	muls	r25, r31
     1a2:	9f 02       	muls	r25, r31
     1a4:	9f 02       	muls	r25, r31
     1a6:	9f 02       	muls	r25, r31
     1a8:	9f 02       	muls	r25, r31
     1aa:	9f 02       	muls	r25, r31
     1ac:	9f 02       	muls	r25, r31
     1ae:	9f 02       	muls	r25, r31
     1b0:	9f 02       	muls	r25, r31
     1b2:	9f 02       	muls	r25, r31
     1b4:	57 02       	muls	r21, r23
     1b6:	69 02       	muls	r22, r25
     1b8:	7b 02       	muls	r23, r27
     1ba:	8d 02       	muls	r24, r29
     1bc:	cb 02       	muls	r28, r27
     1be:	d2 02       	muls	r29, r18
     1c0:	d9 02       	muls	r29, r25
     1c2:	e0 02       	muls	r30, r16
     1c4:	e6 02       	muls	r30, r22
     1c6:	e6 02       	muls	r30, r22
     1c8:	e6 02       	muls	r30, r22
     1ca:	e6 02       	muls	r30, r22
     1cc:	e6 02       	muls	r30, r22
     1ce:	e6 02       	muls	r30, r22
     1d0:	e6 02       	muls	r30, r22
     1d2:	e6 02       	muls	r30, r22
     1d4:	e6 02       	muls	r30, r22
     1d6:	e6 02       	muls	r30, r22
     1d8:	e6 02       	muls	r30, r22
     1da:	e6 02       	muls	r30, r22
     1dc:	e6 02       	muls	r30, r22
     1de:	e6 02       	muls	r30, r22
     1e0:	e6 02       	muls	r30, r22
     1e2:	e6 02       	muls	r30, r22
     1e4:	e6 02       	muls	r30, r22
     1e6:	e6 02       	muls	r30, r22
     1e8:	e6 02       	muls	r30, r22
     1ea:	e6 02       	muls	r30, r22
     1ec:	e6 02       	muls	r30, r22
     1ee:	e6 02       	muls	r30, r22
     1f0:	e6 02       	muls	r30, r22
     1f2:	e6 02       	muls	r30, r22
     1f4:	e6 02       	muls	r30, r22
     1f6:	e6 02       	muls	r30, r22
     1f8:	e6 02       	muls	r30, r22
     1fa:	e6 02       	muls	r30, r22
     1fc:	cb 02       	muls	r28, r27
     1fe:	d2 02       	muls	r29, r18
     200:	d9 02       	muls	r29, r25
     202:	e0 02       	muls	r30, r16
     204:	0d 03       	fmul	r16, r21
     206:	14 03       	mulsu	r17, r20
     208:	1b 03       	fmul	r17, r19
     20a:	22 03       	mulsu	r18, r18
     20c:	28 03       	fmul	r18, r16
     20e:	28 03       	fmul	r18, r16
     210:	28 03       	fmul	r18, r16
     212:	28 03       	fmul	r18, r16
     214:	28 03       	fmul	r18, r16
     216:	28 03       	fmul	r18, r16
     218:	28 03       	fmul	r18, r16
     21a:	28 03       	fmul	r18, r16
     21c:	28 03       	fmul	r18, r16
     21e:	28 03       	fmul	r18, r16
     220:	28 03       	fmul	r18, r16
     222:	28 03       	fmul	r18, r16
     224:	28 03       	fmul	r18, r16
     226:	28 03       	fmul	r18, r16
     228:	28 03       	fmul	r18, r16
     22a:	28 03       	fmul	r18, r16
     22c:	28 03       	fmul	r18, r16
     22e:	28 03       	fmul	r18, r16
     230:	28 03       	fmul	r18, r16
     232:	28 03       	fmul	r18, r16
     234:	28 03       	fmul	r18, r16
     236:	28 03       	fmul	r18, r16
     238:	28 03       	fmul	r18, r16
     23a:	28 03       	fmul	r18, r16
     23c:	28 03       	fmul	r18, r16
     23e:	28 03       	fmul	r18, r16
     240:	28 03       	fmul	r18, r16
     242:	28 03       	fmul	r18, r16
     244:	0d 03       	fmul	r16, r21
     246:	14 03       	mulsu	r17, r20
     248:	1b 03       	fmul	r17, r19
     24a:	22 03       	mulsu	r18, r18

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf e5       	ldi	r28, 0x5F	; 95
     252:	d8 e0       	ldi	r29, 0x08	; 8
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	a0 e6       	ldi	r26, 0x60	; 96
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	ea e0       	ldi	r30, 0x0A	; 10
     260:	f7 e1       	ldi	r31, 0x17	; 23
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a8 3e       	cpi	r26, 0xE8	; 232
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	a8 ee       	ldi	r26, 0xE8	; 232
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	ae 3e       	cpi	r26, 0xEE	; 238
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 20 06 	call	0xc40	; 0xc40 <main>
     282:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <GPIO_vSETPIN_DDR>:
void GPIO_vInternal_pullupON(u_int8 portnum, u_int8 pinnum){
	GPIO_vWRITEPIN(portnum,pinnum,1);
}

void GPIO_vInternal_pullupOFF(u_int8 portnum, u_int8 pinnum){
	GPIO_vWRITEPIN(portnum,pinnum,0);
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	fc 01       	movw	r30, r24
     28e:	e1 54       	subi	r30, 0x41	; 65
     290:	f1 09       	sbc	r31, r1
     292:	e4 32       	cpi	r30, 0x24	; 36
     294:	f1 05       	cpc	r31, r1
     296:	08 f0       	brcs	.+2      	; 0x29a <GPIO_vSETPIN_DDR+0x10>
     298:	67 c0       	rjmp	.+206    	; 0x368 <GPIO_vSETPIN_DDR+0xde>
     29a:	e6 5d       	subi	r30, 0xD6	; 214
     29c:	ff 4f       	sbci	r31, 0xFF	; 255
     29e:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__tablejump2__>
     2a2:	41 30       	cpi	r20, 0x01	; 1
     2a4:	59 f4       	brne	.+22     	; 0x2bc <GPIO_vSETPIN_DDR+0x32>
     2a6:	2a b3       	in	r18, 0x1a	; 26
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GPIO_vSETPIN_DDR+0x28>
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	6a 95       	dec	r22
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GPIO_vSETPIN_DDR+0x24>
     2b6:	82 2b       	or	r24, r18
     2b8:	8a bb       	out	0x1a, r24	; 26
     2ba:	08 95       	ret
     2bc:	2a b3       	in	r18, 0x1a	; 26
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <GPIO_vSETPIN_DDR+0x3e>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <GPIO_vSETPIN_DDR+0x3a>
     2cc:	80 95       	com	r24
     2ce:	82 23       	and	r24, r18
     2d0:	8a bb       	out	0x1a, r24	; 26
     2d2:	08 95       	ret
     2d4:	41 30       	cpi	r20, 0x01	; 1
     2d6:	59 f4       	brne	.+22     	; 0x2ee <GPIO_vSETPIN_DDR+0x64>
     2d8:	27 b3       	in	r18, 0x17	; 23
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <GPIO_vSETPIN_DDR+0x5a>
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	6a 95       	dec	r22
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <GPIO_vSETPIN_DDR+0x56>
     2e8:	82 2b       	or	r24, r18
     2ea:	87 bb       	out	0x17, r24	; 23
     2ec:	08 95       	ret
     2ee:	27 b3       	in	r18, 0x17	; 23
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <GPIO_vSETPIN_DDR+0x70>
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	6a 95       	dec	r22
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <GPIO_vSETPIN_DDR+0x6c>
     2fe:	80 95       	com	r24
     300:	82 23       	and	r24, r18
     302:	87 bb       	out	0x17, r24	; 23
     304:	08 95       	ret
     306:	41 30       	cpi	r20, 0x01	; 1
     308:	59 f4       	brne	.+22     	; 0x320 <GPIO_vSETPIN_DDR+0x96>
     30a:	24 b3       	in	r18, 0x14	; 20
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	02 c0       	rjmp	.+4      	; 0x316 <GPIO_vSETPIN_DDR+0x8c>
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <GPIO_vSETPIN_DDR+0x88>
     31a:	82 2b       	or	r24, r18
     31c:	84 bb       	out	0x14, r24	; 20
     31e:	08 95       	ret
     320:	24 b3       	in	r18, 0x14	; 20
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	02 c0       	rjmp	.+4      	; 0x32c <GPIO_vSETPIN_DDR+0xa2>
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	6a 95       	dec	r22
     32e:	e2 f7       	brpl	.-8      	; 0x328 <GPIO_vSETPIN_DDR+0x9e>
     330:	80 95       	com	r24
     332:	82 23       	and	r24, r18
     334:	84 bb       	out	0x14, r24	; 20
     336:	08 95       	ret
     338:	41 30       	cpi	r20, 0x01	; 1
     33a:	59 f4       	brne	.+22     	; 0x352 <GPIO_vSETPIN_DDR+0xc8>
     33c:	21 b3       	in	r18, 0x11	; 17
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <GPIO_vSETPIN_DDR+0xbe>
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	6a 95       	dec	r22
     34a:	e2 f7       	brpl	.-8      	; 0x344 <GPIO_vSETPIN_DDR+0xba>
     34c:	82 2b       	or	r24, r18
     34e:	81 bb       	out	0x11, r24	; 17
     350:	08 95       	ret
     352:	21 b3       	in	r18, 0x11	; 17
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	02 c0       	rjmp	.+4      	; 0x35e <GPIO_vSETPIN_DDR+0xd4>
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	6a 95       	dec	r22
     360:	e2 f7       	brpl	.-8      	; 0x35a <GPIO_vSETPIN_DDR+0xd0>
     362:	80 95       	com	r24
     364:	82 23       	and	r24, r18
     366:	81 bb       	out	0x11, r24	; 17
     368:	08 95       	ret

0000036a <GPIO_vSETPORT_DDR>:
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fc 01       	movw	r30, r24
     36e:	e1 54       	subi	r30, 0x41	; 65
     370:	f1 09       	sbc	r31, r1
     372:	e4 32       	cpi	r30, 0x24	; 36
     374:	f1 05       	cpc	r31, r1
     376:	58 f4       	brcc	.+22     	; 0x38e <GPIO_vSETPORT_DDR+0x24>
     378:	e2 5b       	subi	r30, 0xB2	; 178
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__tablejump2__>
     380:	6a bb       	out	0x1a, r22	; 26
     382:	08 95       	ret
     384:	67 bb       	out	0x17, r22	; 23
     386:	08 95       	ret
     388:	64 bb       	out	0x14, r22	; 20
     38a:	08 95       	ret
     38c:	61 bb       	out	0x11, r22	; 17
     38e:	08 95       	ret

00000390 <GPIO_vWRITEPIN>:
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	fc 01       	movw	r30, r24
     394:	e1 54       	subi	r30, 0x41	; 65
     396:	f1 09       	sbc	r31, r1
     398:	e4 32       	cpi	r30, 0x24	; 36
     39a:	f1 05       	cpc	r31, r1
     39c:	08 f0       	brcs	.+2      	; 0x3a0 <GPIO_vWRITEPIN+0x10>
     39e:	67 c0       	rjmp	.+206    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     3a0:	ee 58       	subi	r30, 0x8E	; 142
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__tablejump2__>
     3a8:	41 30       	cpi	r20, 0x01	; 1
     3aa:	59 f4       	brne	.+22     	; 0x3c2 <GPIO_vWRITEPIN+0x32>
     3ac:	2b b3       	in	r18, 0x1b	; 27
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <GPIO_vWRITEPIN+0x28>
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	6a 95       	dec	r22
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <GPIO_vWRITEPIN+0x24>
     3bc:	82 2b       	or	r24, r18
     3be:	8b bb       	out	0x1b, r24	; 27
     3c0:	08 95       	ret
     3c2:	2b b3       	in	r18, 0x1b	; 27
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <GPIO_vWRITEPIN+0x3e>
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	6a 95       	dec	r22
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <GPIO_vWRITEPIN+0x3a>
     3d2:	80 95       	com	r24
     3d4:	82 23       	and	r24, r18
     3d6:	8b bb       	out	0x1b, r24	; 27
     3d8:	08 95       	ret
     3da:	41 30       	cpi	r20, 0x01	; 1
     3dc:	59 f4       	brne	.+22     	; 0x3f4 <GPIO_vWRITEPIN+0x64>
     3de:	28 b3       	in	r18, 0x18	; 24
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <GPIO_vWRITEPIN+0x5a>
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	6a 95       	dec	r22
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <GPIO_vWRITEPIN+0x56>
     3ee:	82 2b       	or	r24, r18
     3f0:	88 bb       	out	0x18, r24	; 24
     3f2:	08 95       	ret
     3f4:	28 b3       	in	r18, 0x18	; 24
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	6a 95       	dec	r22
     402:	e2 f7       	brpl	.-8      	; 0x3fc <GPIO_vWRITEPIN+0x6c>
     404:	80 95       	com	r24
     406:	82 23       	and	r24, r18
     408:	88 bb       	out	0x18, r24	; 24
     40a:	08 95       	ret
     40c:	41 30       	cpi	r20, 0x01	; 1
     40e:	59 f4       	brne	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     410:	25 b3       	in	r18, 0x15	; 21
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	6a 95       	dec	r22
     41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     420:	82 2b       	or	r24, r18
     422:	85 bb       	out	0x15, r24	; 21
     424:	08 95       	ret
     426:	25 b3       	in	r18, 0x15	; 21
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	6a 95       	dec	r22
     434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     436:	80 95       	com	r24
     438:	82 23       	and	r24, r18
     43a:	85 bb       	out	0x15, r24	; 21
     43c:	08 95       	ret
     43e:	41 30       	cpi	r20, 0x01	; 1
     440:	59 f4       	brne	.+22     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     442:	22 b3       	in	r18, 0x12	; 18
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	6a 95       	dec	r22
     450:	e2 f7       	brpl	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     452:	82 2b       	or	r24, r18
     454:	82 bb       	out	0x12, r24	; 18
     456:	08 95       	ret
     458:	22 b3       	in	r18, 0x12	; 18
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	6a 95       	dec	r22
     466:	e2 f7       	brpl	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     468:	80 95       	com	r24
     46a:	82 23       	and	r24, r18
     46c:	82 bb       	out	0x12, r24	; 18
     46e:	08 95       	ret

00000470 <GPIO_vWRITEPORT>:
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	fc 01       	movw	r30, r24
     474:	e1 54       	subi	r30, 0x41	; 65
     476:	f1 09       	sbc	r31, r1
     478:	e4 32       	cpi	r30, 0x24	; 36
     47a:	f1 05       	cpc	r31, r1
     47c:	58 f4       	brcc	.+22     	; 0x494 <GPIO_vWRITEPORT+0x24>
     47e:	ea 56       	subi	r30, 0x6A	; 106
     480:	ff 4f       	sbci	r31, 0xFF	; 255
     482:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__tablejump2__>
     486:	6b bb       	out	0x1b, r22	; 27
     488:	08 95       	ret
     48a:	68 bb       	out	0x18, r22	; 24
     48c:	08 95       	ret
     48e:	65 bb       	out	0x15, r22	; 21
     490:	08 95       	ret
     492:	62 bb       	out	0x12, r22	; 18
     494:	08 95       	ret

00000496 <GPIO_u8READPIN>:
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	fc 01       	movw	r30, r24
     49a:	e1 54       	subi	r30, 0x41	; 65
     49c:	f1 09       	sbc	r31, r1
     49e:	e4 32       	cpi	r30, 0x24	; 36
     4a0:	f1 05       	cpc	r31, r1
     4a2:	08 f0       	brcs	.+2      	; 0x4a6 <GPIO_u8READPIN+0x10>
     4a4:	4c c0       	rjmp	.+152    	; 0x53e <GPIO_u8READPIN+0xa8>
     4a6:	e6 54       	subi	r30, 0x46	; 70
     4a8:	ff 4f       	sbci	r31, 0xFF	; 255
     4aa:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__tablejump2__>
     4ae:	29 b3       	in	r18, 0x19	; 25
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	06 2e       	mov	r0, r22
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <GPIO_u8READPIN+0x26>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	0a 94       	dec	r0
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <GPIO_u8READPIN+0x22>
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	82 23       	and	r24, r18
     4c4:	93 23       	and	r25, r19
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <GPIO_u8READPIN+0x36>
     4c8:	95 95       	asr	r25
     4ca:	87 95       	ror	r24
     4cc:	6a 95       	dec	r22
     4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <GPIO_u8READPIN+0x32>
     4d0:	08 95       	ret
     4d2:	26 b3       	in	r18, 0x16	; 22
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	06 2e       	mov	r0, r22
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <GPIO_u8READPIN+0x4a>
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	0a 94       	dec	r0
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <GPIO_u8READPIN+0x46>
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	82 23       	and	r24, r18
     4e8:	93 23       	and	r25, r19
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <GPIO_u8READPIN+0x5a>
     4ec:	95 95       	asr	r25
     4ee:	87 95       	ror	r24
     4f0:	6a 95       	dec	r22
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <GPIO_u8READPIN+0x56>
     4f4:	08 95       	ret
     4f6:	23 b3       	in	r18, 0x13	; 19
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	06 2e       	mov	r0, r22
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <GPIO_u8READPIN+0x6e>
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	0a 94       	dec	r0
     506:	e2 f7       	brpl	.-8      	; 0x500 <GPIO_u8READPIN+0x6a>
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	82 23       	and	r24, r18
     50c:	93 23       	and	r25, r19
     50e:	02 c0       	rjmp	.+4      	; 0x514 <GPIO_u8READPIN+0x7e>
     510:	95 95       	asr	r25
     512:	87 95       	ror	r24
     514:	6a 95       	dec	r22
     516:	e2 f7       	brpl	.-8      	; 0x510 <GPIO_u8READPIN+0x7a>
     518:	08 95       	ret
     51a:	20 b3       	in	r18, 0x10	; 16
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	06 2e       	mov	r0, r22
     522:	02 c0       	rjmp	.+4      	; 0x528 <GPIO_u8READPIN+0x92>
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	0a 94       	dec	r0
     52a:	e2 f7       	brpl	.-8      	; 0x524 <GPIO_u8READPIN+0x8e>
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	82 23       	and	r24, r18
     530:	93 23       	and	r25, r19
     532:	02 c0       	rjmp	.+4      	; 0x538 <GPIO_u8READPIN+0xa2>
     534:	95 95       	asr	r25
     536:	87 95       	ror	r24
     538:	6a 95       	dec	r22
     53a:	e2 f7       	brpl	.-8      	; 0x534 <GPIO_u8READPIN+0x9e>
     53c:	08 95       	ret
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	08 95       	ret

00000542 <GPIO_vInternal_pullupON>:
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
     548:	08 95       	ret

0000054a <GPIO_vLowNibble_Set_DDR>:
}

void GPIO_vLowNibble_Set_DDR(u_int8 portnum, u_int8 dir){
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	c8 2f       	mov	r28, r24
     550:	d6 2f       	mov	r29, r22
	GPIO_vSETPIN_DDR(portnum,0,dir);
     552:	46 2f       	mov	r20, r22
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,1,dir);
     55a:	4d 2f       	mov	r20, r29
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	8c 2f       	mov	r24, r28
     560:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,2,dir);
     564:	4d 2f       	mov	r20, r29
     566:	62 e0       	ldi	r22, 0x02	; 2
     568:	8c 2f       	mov	r24, r28
     56a:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,3,dir);
     56e:	4d 2f       	mov	r20, r29
     570:	63 e0       	ldi	r22, 0x03	; 3
     572:	8c 2f       	mov	r24, r28
     574:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <GPIO_vLowNibble_write>:

void GPIO_vLowNibble_write(u_int8 portnum, u_int8 val){
	val &= 0x0f;
     57e:	6f 70       	andi	r22, 0x0F	; 15
	switch(portnum){
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	fc 01       	movw	r30, r24
     584:	e1 54       	subi	r30, 0x41	; 65
     586:	f1 09       	sbc	r31, r1
     588:	e4 32       	cpi	r30, 0x24	; 36
     58a:	f1 05       	cpc	r31, r1
     58c:	f8 f4       	brcc	.+62     	; 0x5cc <GPIO_vLowNibble_write+0x4e>
     58e:	e2 52       	subi	r30, 0x22	; 34
     590:	ff 4f       	sbci	r31, 0xFF	; 255
     592:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__tablejump2__>
		case 'A' :
		case 'a' :
			XPORTA &= 0xf0;
     596:	8b b3       	in	r24, 0x1b	; 27
     598:	80 7f       	andi	r24, 0xF0	; 240
     59a:	8b bb       	out	0x1b, r24	; 27
			XPORTA |= val;
     59c:	8b b3       	in	r24, 0x1b	; 27
     59e:	68 2b       	or	r22, r24
     5a0:	6b bb       	out	0x1b, r22	; 27
		break;
     5a2:	08 95       	ret
		case 'B' :
		case 'b' :
			XPORTB &= 0xf0;
     5a4:	88 b3       	in	r24, 0x18	; 24
     5a6:	80 7f       	andi	r24, 0xF0	; 240
     5a8:	88 bb       	out	0x18, r24	; 24
			XPORTB |= val;
     5aa:	88 b3       	in	r24, 0x18	; 24
     5ac:	68 2b       	or	r22, r24
     5ae:	68 bb       	out	0x18, r22	; 24
		break;
     5b0:	08 95       	ret
		case 'C' :
		case 'c' :
			XPORTC &= 0xf0;
     5b2:	85 b3       	in	r24, 0x15	; 21
     5b4:	80 7f       	andi	r24, 0xF0	; 240
     5b6:	85 bb       	out	0x15, r24	; 21
			XPORTC |= val;
     5b8:	85 b3       	in	r24, 0x15	; 21
     5ba:	68 2b       	or	r22, r24
     5bc:	65 bb       	out	0x15, r22	; 21
		break;
     5be:	08 95       	ret
		case 'D' :
		case 'd' :
			XPORTD &= 0xf0;
     5c0:	82 b3       	in	r24, 0x12	; 18
     5c2:	80 7f       	andi	r24, 0xF0	; 240
     5c4:	82 bb       	out	0x12, r24	; 18
			XPORTD |= val;
     5c6:	82 b3       	in	r24, 0x12	; 18
     5c8:	68 2b       	or	r22, r24
     5ca:	62 bb       	out	0x12, r22	; 18
     5cc:	08 95       	ret

000005ce <GPIO_vHighNibble_Set_DDR>:
		break;
	}
}

void GPIO_vHighNibble_Set_DDR(u_int8 portnum, u_int8 dir){
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	c8 2f       	mov	r28, r24
     5d4:	d6 2f       	mov	r29, r22
	GPIO_vSETPIN_DDR(portnum,4,dir);
     5d6:	46 2f       	mov	r20, r22
     5d8:	64 e0       	ldi	r22, 0x04	; 4
     5da:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,5,dir);
     5de:	4d 2f       	mov	r20, r29
     5e0:	65 e0       	ldi	r22, 0x05	; 5
     5e2:	8c 2f       	mov	r24, r28
     5e4:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,6,dir);
     5e8:	4d 2f       	mov	r20, r29
     5ea:	66 e0       	ldi	r22, 0x06	; 6
     5ec:	8c 2f       	mov	r24, r28
     5ee:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,7,dir);
     5f2:	4d 2f       	mov	r20, r29
     5f4:	67 e0       	ldi	r22, 0x07	; 7
     5f6:	8c 2f       	mov	r24, r28
     5f8:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <GPIO_vHighNibble_write>:

void GPIO_vHighNibble_write(u_int8 portnum, u_int8 val){
	val &= 0xf0;
     602:	60 7f       	andi	r22, 0xF0	; 240
	switch(portnum){
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	fc 01       	movw	r30, r24
     608:	e1 54       	subi	r30, 0x41	; 65
     60a:	f1 09       	sbc	r31, r1
     60c:	e4 32       	cpi	r30, 0x24	; 36
     60e:	f1 05       	cpc	r31, r1
     610:	f8 f4       	brcc	.+62     	; 0x650 <GPIO_vHighNibble_write+0x4e>
     612:	ee 5f       	subi	r30, 0xFE	; 254
     614:	fe 4f       	sbci	r31, 0xFE	; 254
     616:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__tablejump2__>
		case 'A' :
		case 'a' :
			XPORTA &= 0x0f;
     61a:	8b b3       	in	r24, 0x1b	; 27
     61c:	8f 70       	andi	r24, 0x0F	; 15
     61e:	8b bb       	out	0x1b, r24	; 27
			XPORTA |= val;
     620:	8b b3       	in	r24, 0x1b	; 27
     622:	68 2b       	or	r22, r24
     624:	6b bb       	out	0x1b, r22	; 27
		break;
     626:	08 95       	ret
		case 'B' :
		case 'b' :
			XPORTB &= 0x0f;
     628:	88 b3       	in	r24, 0x18	; 24
     62a:	8f 70       	andi	r24, 0x0F	; 15
     62c:	88 bb       	out	0x18, r24	; 24
			XPORTB |= val;
     62e:	88 b3       	in	r24, 0x18	; 24
     630:	68 2b       	or	r22, r24
     632:	68 bb       	out	0x18, r22	; 24
		break;
     634:	08 95       	ret
		case 'C' :
		case 'c' :
			XPORTC &= 0x0f;
     636:	85 b3       	in	r24, 0x15	; 21
     638:	8f 70       	andi	r24, 0x0F	; 15
     63a:	85 bb       	out	0x15, r24	; 21
			XPORTC |= val;
     63c:	85 b3       	in	r24, 0x15	; 21
     63e:	68 2b       	or	r22, r24
     640:	65 bb       	out	0x15, r22	; 21
		break;
     642:	08 95       	ret
		case 'D' :
		case 'd' :
			XPORTD &= 0x0f;
     644:	82 b3       	in	r24, 0x12	; 18
     646:	8f 70       	andi	r24, 0x0F	; 15
     648:	82 bb       	out	0x12, r24	; 18
			XPORTD |= val;
     64a:	82 b3       	in	r24, 0x12	; 18
     64c:	68 2b       	or	r22, r24
     64e:	62 bb       	out	0x12, r22	; 18
     650:	08 95       	ret

00000652 <EEPROM_vWrite>:
 */ 

#include "Internal_EEPROM_MCAL.h"

void EEPROM_vWrite(u_int16 address, u_int8 val){
	XEEARL = (u_int8)address;
     652:	8e bb       	out	0x1e, r24	; 30
	XEEARH = (u_int8)(address>>8);
     654:	9f bb       	out	0x1f, r25	; 31
	XEEDR = val;
     656:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(XEECR, EEMWE);
     658:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(XEECR, EEWE);
     65a:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(XEECR, EEWE) == 1);
     65c:	e1 99       	sbic	0x1c, 1	; 28
     65e:	fe cf       	rjmp	.-4      	; 0x65c <EEPROM_vWrite+0xa>
}
     660:	08 95       	ret

00000662 <EEPROM_u8Read>:

u_int8 EEPROM_u8Read(u_int16 address){
	XEEARL = (u_int8)address;
     662:	8e bb       	out	0x1e, r24	; 30
	XEEARH = (u_int8)(address>>8);
     664:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(XEECR, EERE);
     666:	e0 9a       	sbi	0x1c, 0	; 28
	return XEEDR;
     668:	8d b3       	in	r24, 0x1d	; 29
}
     66a:	08 95       	ret

0000066c <Keypad_vInit>:
 *  Author: ahmed
 */ 

#include "Keypad_ECU_driver.h"

void Keypad_vInit(u_int8 port){
     66c:	cf 93       	push	r28
     66e:	c8 2f       	mov	r28, r24
	GPIO_vSETPORT_DDR(port, 0x0F);
     670:	6f e0       	ldi	r22, 0x0F	; 15
     672:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_vSETPORT_DDR>
	GPIO_vInternal_pullupON(port, 4);
     676:	64 e0       	ldi	r22, 0x04	; 4
     678:	8c 2f       	mov	r24, r28
     67a:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_vInternal_pullupON>
	GPIO_vInternal_pullupON(port, 5);
     67e:	65 e0       	ldi	r22, 0x05	; 5
     680:	8c 2f       	mov	r24, r28
     682:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_vInternal_pullupON>
	GPIO_vInternal_pullupON(port, 6);
     686:	66 e0       	ldi	r22, 0x06	; 6
     688:	8c 2f       	mov	r24, r28
     68a:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_vInternal_pullupON>
	GPIO_vInternal_pullupON(port, 7);
     68e:	67 e0       	ldi	r22, 0x07	; 7
     690:	8c 2f       	mov	r24, r28
     692:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_vInternal_pullupON>
}
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <Keypad_u8Check_Press>:

u_int8 Keypad_u8Check_Press(u_int8 port){
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	60 97       	sbiw	r28, 0x10	; 16
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	08 2f       	mov	r16, r24
	u_int8 arr[4][4] = {{'1','2','3','A'}, {'4','5','6','B'}, {'7','8','9','C'},{'*','0','#','D'}}; //Real Keypad.
     6b6:	80 e1       	ldi	r24, 0x10	; 16
     6b8:	e0 e6       	ldi	r30, 0x60	; 96
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	de 01       	movw	r26, r28
     6be:	11 96       	adiw	r26, 0x01	; 1
     6c0:	01 90       	ld	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	8a 95       	dec	r24
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <Keypad_u8Check_Press+0x26>
	//u_int8 arr[4][4] = {{'7','8','9','/'}, {'4','5','6','*'}, {'1','2','3','-'},{'A','0','=','+'}}; //Proteus Keypad.
	u_int8 row, column, x;
	u_int8 return_val = NOTPRESSED;
	for(row = 0; row < 4; row++){
     6c8:	f1 2c       	mov	r15, r1
		GPIO_vWRITEPIN(port, 0, 1);
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	80 2f       	mov	r24, r16
     6d0:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		GPIO_vWRITEPIN(port, 1, 1);
     6d4:	41 e0       	ldi	r20, 0x01	; 1
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	80 2f       	mov	r24, r16
     6da:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		GPIO_vWRITEPIN(port, 2, 1);
     6de:	41 e0       	ldi	r20, 0x01	; 1
     6e0:	62 e0       	ldi	r22, 0x02	; 2
     6e2:	80 2f       	mov	r24, r16
     6e4:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		GPIO_vWRITEPIN(port, 3, 1);
     6e8:	41 e0       	ldi	r20, 0x01	; 1
     6ea:	63 e0       	ldi	r22, 0x03	; 3
     6ec:	80 2f       	mov	r24, r16
     6ee:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		GPIO_vWRITEPIN(port, row, 0);
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	6f 2d       	mov	r22, r15
     6f6:	80 2f       	mov	r24, r16
     6f8:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		for(column = 0; column < 4; column++){
     6fc:	10 e0       	ldi	r17, 0x00	; 0
			x = GPIO_u8READPIN(port, (column + 4));
     6fe:	64 e0       	ldi	r22, 0x04	; 4
     700:	61 0f       	add	r22, r17
     702:	80 2f       	mov	r24, r16
     704:	0e 94 4b 02 	call	0x496	; 0x496 <GPIO_u8READPIN>
			if(0 == x){
     708:	81 11       	cpse	r24, r1
     70a:	0d c0       	rjmp	.+26     	; 0x726 <Keypad_u8Check_Press+0x8c>
				return_val = arr[row][column];
     70c:	e1 e0       	ldi	r30, 0x01	; 1
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	ec 0f       	add	r30, r28
     712:	fd 1f       	adc	r31, r29
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	f8 9e       	mul	r15, r24
     718:	e0 0d       	add	r30, r0
     71a:	f1 1d       	adc	r31, r1
     71c:	11 24       	eor	r1, r1
     71e:	e1 0f       	add	r30, r17
     720:	f1 1d       	adc	r31, r1
     722:	80 81       	ld	r24, Z
     724:	08 c0       	rjmp	.+16     	; 0x736 <Keypad_u8Check_Press+0x9c>
		GPIO_vWRITEPIN(port, 0, 1);
		GPIO_vWRITEPIN(port, 1, 1);
		GPIO_vWRITEPIN(port, 2, 1);
		GPIO_vWRITEPIN(port, 3, 1);
		GPIO_vWRITEPIN(port, row, 0);
		for(column = 0; column < 4; column++){
     726:	1f 5f       	subi	r17, 0xFF	; 255
     728:	14 30       	cpi	r17, 0x04	; 4
     72a:	49 f7       	brne	.-46     	; 0x6fe <Keypad_u8Check_Press+0x64>
u_int8 Keypad_u8Check_Press(u_int8 port){
	u_int8 arr[4][4] = {{'1','2','3','A'}, {'4','5','6','B'}, {'7','8','9','C'},{'*','0','#','D'}}; //Real Keypad.
	//u_int8 arr[4][4] = {{'7','8','9','/'}, {'4','5','6','*'}, {'1','2','3','-'},{'A','0','=','+'}}; //Proteus Keypad.
	u_int8 row, column, x;
	u_int8 return_val = NOTPRESSED;
	for(row = 0; row < 4; row++){
     72c:	f3 94       	inc	r15
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	f8 12       	cpse	r15, r24
     732:	cb cf       	rjmp	.-106    	; 0x6ca <Keypad_u8Check_Press+0x30>
     734:	8f ef       	ldi	r24, 0xFF	; 255
		if(0 == x){
			break;
		}
	}
	return return_val;
     736:	60 96       	adiw	r28, 0x10	; 16
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	08 95       	ret

0000074e <LCD_vSend_Falling_Edge>:
		}
	}
}

static void LCD_vSend_Falling_Edge(){
	GPIO_vWRITEPIN(ip ->EN_Port, ip -> EN_Pin, 1);
     74e:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     752:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	60 85       	ldd	r22, Z+8	; 0x08
     75a:	87 81       	ldd	r24, Z+7	; 0x07
     75c:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     760:	83 ef       	ldi	r24, 0xF3	; 243
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <LCD_vSend_Falling_Edge+0x16>
     768:	00 c0       	rjmp	.+0      	; 0x76a <LCD_vSend_Falling_Edge+0x1c>
     76a:	00 00       	nop
	_delay_ms(2);
	GPIO_vWRITEPIN(ip ->EN_Port, ip -> EN_Pin, 0);
     76c:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     770:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	60 85       	ldd	r22, Z+8	; 0x08
     778:	87 81       	ldd	r24, Z+7	; 0x07
     77a:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
     77e:	08 95       	ret

00000780 <LCD_vGet_Config>:
 *  Author: ahmed
 */ 
#include "LCD_ECU_driver.h"

OBJ *ip;
void LCD_vGet_Config(OBJ *ptr, u_int8 mode, u_int8 nibble, u_int8 port, u_int8 rs_port, u_int8 rs_pin, u_int8 rw_port, u_int8 rw_pin, u_int8 en_port, u_int8 en_pin){
     780:	8f 92       	push	r8
     782:	af 92       	push	r10
     784:	cf 92       	push	r12
     786:	ef 92       	push	r14
     788:	0f 93       	push	r16
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
	ip = ptr;
     792:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__data_end+0x1>
     796:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__data_end>
	ip ->Mode = mode;
     79a:	fc 01       	movw	r30, r24
     79c:	60 83       	st	Z, r22
	ip ->Nibble = nibble;
     79e:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     7a2:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     7a6:	41 83       	std	Z+1, r20	; 0x01
	ip ->LCD_Port = port;
     7a8:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     7ac:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     7b0:	22 83       	std	Z+2, r18	; 0x02
	ip ->RS_Port = rs_port;
     7b2:	03 83       	std	Z+3, r16	; 0x03
	ip ->RS_Pin = rs_pin;
     7b4:	e4 82       	std	Z+4, r14	; 0x04
	ip ->RW_Port = rw_port;
     7b6:	c5 82       	std	Z+5, r12	; 0x05
	ip ->RW_Pin = rw_pin;
     7b8:	a6 82       	std	Z+6, r10	; 0x06
	ip ->EN_Port = en_port;
     7ba:	87 82       	std	Z+7, r8	; 0x07
	ip ->EN_Pin = en_pin;
     7bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     7be:	80 87       	std	Z+8, r24	; 0x08
}
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	0f 91       	pop	r16
     7c6:	ef 90       	pop	r14
     7c8:	cf 90       	pop	r12
     7ca:	af 90       	pop	r10
     7cc:	8f 90       	pop	r8
     7ce:	08 95       	ret

000007d0 <LCD_vSend_Cmd>:
			}
		}
	}
}

void LCD_vSend_Cmd(u_int8 cmd){
     7d0:	cf 93       	push	r28
     7d2:	c8 2f       	mov	r28, r24
	if(ip ->Mode == EIGHT_BIT){
     7d4:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     7d8:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     7dc:	80 81       	ld	r24, Z
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	81 f4       	brne	.+32     	; 0x802 <LCD_vSend_Cmd+0x32>
		GPIO_vWRITEPORT(ip ->LCD_Port, cmd);
     7e2:	6c 2f       	mov	r22, r28
     7e4:	82 81       	ldd	r24, Z+2	; 0x02
     7e6:	0e 94 38 02 	call	0x470	; 0x470 <GPIO_vWRITEPORT>
		GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
     7ea:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     7ee:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	64 81       	ldd	r22, Z+4	; 0x04
     7f6:	83 81       	ldd	r24, Z+3	; 0x03
     7f8:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		LCD_vSend_Falling_Edge();
     7fc:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
     800:	58 c0       	rjmp	.+176    	; 0x8b2 <__stack+0x53>
	}
	else{
		if(ip -> Nibble == HIGH_NIBBLE){
     802:	81 81       	ldd	r24, Z+1	; 0x01
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	59 f5       	brne	.+86     	; 0x85e <LCD_vSend_Cmd+0x8e>
			GPIO_vHighNibble_write(ip -> LCD_Port, cmd>>4);
     808:	6c 2f       	mov	r22, r28
     80a:	62 95       	swap	r22
     80c:	6f 70       	andi	r22, 0x0F	; 15
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	0e 94 01 03 	call	0x602	; 0x602 <GPIO_vHighNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
     814:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     818:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	64 81       	ldd	r22, Z+4	; 0x04
     820:	83 81       	ldd	r24, Z+3	; 0x03
     822:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
     826:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
			GPIO_vHighNibble_write(ip -> LCD_Port, cmd);
     82a:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     82e:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     832:	6c 2f       	mov	r22, r28
     834:	82 81       	ldd	r24, Z+2	; 0x02
     836:	0e 94 01 03 	call	0x602	; 0x602 <GPIO_vHighNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
     83a:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     83e:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	64 81       	ldd	r22, Z+4	; 0x04
     846:	83 81       	ldd	r24, Z+3	; 0x03
     848:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
     84c:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
     850:	89 ef       	ldi	r24, 0xF9	; 249
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <LCD_vSend_Cmd+0x84>
     858:	00 c0       	rjmp	.+0      	; 0x85a <LCD_vSend_Cmd+0x8a>
     85a:	00 00       	nop
     85c:	2a c0       	rjmp	.+84     	; 0x8b2 <__stack+0x53>
			_delay_ms(1);
		}
		else{
			GPIO_vLowNibble_write(ip -> LCD_Port, cmd>>4);
     85e:	6c 2f       	mov	r22, r28
     860:	62 95       	swap	r22
     862:	6f 70       	andi	r22, 0x0F	; 15
     864:	82 81       	ldd	r24, Z+2	; 0x02
     866:	0e 94 bf 02 	call	0x57e	; 0x57e <GPIO_vLowNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
     86a:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     86e:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	64 81       	ldd	r22, Z+4	; 0x04
     876:	83 81       	ldd	r24, Z+3	; 0x03
     878:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
     87c:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
			GPIO_vLowNibble_write(ip -> LCD_Port, cmd);
     880:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     884:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     888:	6c 2f       	mov	r22, r28
     88a:	82 81       	ldd	r24, Z+2	; 0x02
     88c:	0e 94 bf 02 	call	0x57e	; 0x57e <GPIO_vLowNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
     890:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     894:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	64 81       	ldd	r22, Z+4	; 0x04
     89c:	83 81       	ldd	r24, Z+3	; 0x03
     89e:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
     8a2:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
     8a6:	89 ef       	ldi	r24, 0xF9	; 249
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <__stack+0x4b>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <__stack+0x51>
     8b0:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <LCD_vInit>:
	ip ->EN_Port = en_port;
	ip ->EN_Pin = en_pin;
}

void LCD_vInit(){
	if(ip != 0){
     8b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
     8ba:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__data_end+0x1>
     8be:	89 2b       	or	r24, r25
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <LCD_vInit+0xe>
     8c2:	d2 c0       	rjmp	.+420    	; 0xa68 <LCD_vInit+0x1b2>
     8c4:	8f e4       	ldi	r24, 0x4F	; 79
     8c6:	93 ec       	ldi	r25, 0xC3	; 195
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <LCD_vInit+0x12>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <LCD_vInit+0x18>
     8ce:	00 00       	nop
		_delay_ms(200);
		GPIO_vSETPIN_DDR(ip ->RS_Port, ip ->RS_Pin, 1);
     8d0:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     8d4:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	64 81       	ldd	r22, Z+4	; 0x04
     8dc:	83 81       	ldd	r24, Z+3	; 0x03
     8de:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(ip ->RW_Port, ip ->RW_Pin, 1);
     8e2:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     8e6:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     8ea:	41 e0       	ldi	r20, 0x01	; 1
     8ec:	66 81       	ldd	r22, Z+6	; 0x06
     8ee:	85 81       	ldd	r24, Z+5	; 0x05
     8f0:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(ip ->EN_Port, ip ->EN_Pin, 1);
     8f4:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     8f8:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     8fc:	41 e0       	ldi	r20, 0x01	; 1
     8fe:	60 85       	ldd	r22, Z+8	; 0x08
     900:	87 81       	ldd	r24, Z+7	; 0x07
     902:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
		if(ip -> Mode == EIGHT_BIT){
     906:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     90a:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     90e:	80 81       	ld	r24, Z
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	c1 f5       	brne	.+112    	; 0x984 <LCD_vInit+0xce>
			GPIO_vSETPORT_DDR(ip ->LCD_Port, 0xFF);
     914:	6f ef       	ldi	r22, 0xFF	; 255
     916:	82 81       	ldd	r24, Z+2	; 0x02
     918:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_vSETPORT_DDR>
			GPIO_vWRITEPIN(ip ->RW_Port, ip ->RW_Pin, 0);
     91c:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     920:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	66 81       	ldd	r22, Z+6	; 0x06
     928:	85 81       	ldd	r24, Z+5	; 0x05
     92a:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
     92e:	85 ea       	ldi	r24, 0xA5	; 165
     930:	9e e0       	ldi	r25, 0x0E	; 14
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	f1 f7       	brne	.-4      	; 0x932 <LCD_vInit+0x7c>
     936:	00 c0       	rjmp	.+0      	; 0x938 <LCD_vInit+0x82>
     938:	00 00       	nop
			_delay_ms(15);
			LCD_vSend_Cmd(LCD_8Bit_2Lines);
     93a:	88 e3       	ldi	r24, 0x38	; 56
     93c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     940:	89 ef       	ldi	r24, 0xF9	; 249
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <LCD_vInit+0x8e>
     948:	00 c0       	rjmp	.+0      	; 0x94a <LCD_vInit+0x94>
     94a:	00 00       	nop
			_delay_ms(1);
			LCD_vSend_Cmd(LCD_DISP_ON_CURSOR_ON);
     94c:	8e e0       	ldi	r24, 0x0E	; 14
     94e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     952:	89 ef       	ldi	r24, 0xF9	; 249
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	f1 f7       	brne	.-4      	; 0x956 <LCD_vInit+0xa0>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <LCD_vInit+0xa6>
     95c:	00 00       	nop
			_delay_ms(1);
			LCD_vSend_Cmd(LCD_CLEAR_SCREEN);
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     964:	83 ec       	ldi	r24, 0xC3	; 195
     966:	99 e0       	ldi	r25, 0x09	; 9
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <LCD_vInit+0xb2>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <LCD_vInit+0xb8>
     96e:	00 00       	nop
			_delay_ms(10);
			LCD_vSend_Cmd(LCD_ENTRY_MODE);
     970:	86 e0       	ldi	r24, 0x06	; 6
     972:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     976:	89 ef       	ldi	r24, 0xF9	; 249
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <LCD_vInit+0xc4>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <LCD_vInit+0xca>
     980:	00 00       	nop
     982:	08 95       	ret
			_delay_ms(1);
		}
		else{
			if(ip ->Nibble == HIGH_NIBBLE){
     984:	81 81       	ldd	r24, Z+1	; 0x01
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	c1 f5       	brne	.+112    	; 0x9fa <LCD_vInit+0x144>
				GPIO_vHighNibble_Set_DDR(ip ->LCD_Port, 1);
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <GPIO_vHighNibble_Set_DDR>
				GPIO_vWRITEPIN(ip ->RW_Port, ip ->RW_Pin, 0);
     992:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     996:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	66 81       	ldd	r22, Z+6	; 0x06
     99e:	85 81       	ldd	r24, Z+5	; 0x05
     9a0:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
     9a4:	85 ea       	ldi	r24, 0xA5	; 165
     9a6:	9e e0       	ldi	r25, 0x0E	; 14
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <LCD_vInit+0xf2>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <LCD_vInit+0xf8>
     9ae:	00 00       	nop
				_delay_ms(15);
				LCD_vSend_Cmd(LCD_8Bit_2Lines);
     9b0:	88 e3       	ldi	r24, 0x38	; 56
     9b2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     9b6:	89 ef       	ldi	r24, 0xF9	; 249
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <LCD_vInit+0x104>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <LCD_vInit+0x10a>
     9c0:	00 00       	nop
				_delay_ms(1);
				LCD_vSend_Cmd(LCD_DISP_ON_CURSOR_ON);
     9c2:	8e e0       	ldi	r24, 0x0E	; 14
     9c4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     9c8:	89 ef       	ldi	r24, 0xF9	; 249
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <LCD_vInit+0x116>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <LCD_vInit+0x11c>
     9d2:	00 00       	nop
				_delay_ms(1);
				LCD_vSend_Cmd(LCD_CLEAR_SCREEN);
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     9da:	83 ec       	ldi	r24, 0xC3	; 195
     9dc:	99 e0       	ldi	r25, 0x09	; 9
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <LCD_vInit+0x128>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <LCD_vInit+0x12e>
     9e4:	00 00       	nop
				_delay_ms(10);
				LCD_vSend_Cmd(LCD_ENTRY_MODE);
     9e6:	86 e0       	ldi	r24, 0x06	; 6
     9e8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     9ec:	89 ef       	ldi	r24, 0xF9	; 249
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <LCD_vInit+0x13a>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <LCD_vInit+0x140>
     9f6:	00 00       	nop
     9f8:	08 95       	ret
				_delay_ms(1);
			}
			else{
				GPIO_vLowNibble_Set_DDR(ip ->LCD_Port, 1);
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	82 81       	ldd	r24, Z+2	; 0x02
     9fe:	0e 94 a5 02 	call	0x54a	; 0x54a <GPIO_vLowNibble_Set_DDR>
				GPIO_vWRITEPIN(ip ->RW_Port, ip ->RW_Pin, 0);
     a02:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     a06:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	66 81       	ldd	r22, Z+6	; 0x06
     a0e:	85 81       	ldd	r24, Z+5	; 0x05
     a10:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
     a14:	85 ea       	ldi	r24, 0xA5	; 165
     a16:	9e e0       	ldi	r25, 0x0E	; 14
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <LCD_vInit+0x162>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <LCD_vInit+0x168>
     a1e:	00 00       	nop
				_delay_ms(15);
				LCD_vSend_Cmd(LCD_8Bit_2Lines);
     a20:	88 e3       	ldi	r24, 0x38	; 56
     a22:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     a26:	89 ef       	ldi	r24, 0xF9	; 249
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <LCD_vInit+0x174>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <LCD_vInit+0x17a>
     a30:	00 00       	nop
				_delay_ms(1);
				LCD_vSend_Cmd(LCD_DISP_ON_CURSOR_ON);
     a32:	8e e0       	ldi	r24, 0x0E	; 14
     a34:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     a38:	89 ef       	ldi	r24, 0xF9	; 249
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <LCD_vInit+0x186>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <LCD_vInit+0x18c>
     a42:	00 00       	nop
				_delay_ms(1);
				LCD_vSend_Cmd(LCD_CLEAR_SCREEN);
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     a4a:	83 ec       	ldi	r24, 0xC3	; 195
     a4c:	99 e0       	ldi	r25, 0x09	; 9
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <LCD_vInit+0x198>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <LCD_vInit+0x19e>
     a54:	00 00       	nop
				_delay_ms(10);
				LCD_vSend_Cmd(LCD_ENTRY_MODE);
     a56:	86 e0       	ldi	r24, 0x06	; 6
     a58:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     a5c:	89 ef       	ldi	r24, 0xF9	; 249
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <LCD_vInit+0x1aa>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <LCD_vInit+0x1b0>
     a66:	00 00       	nop
     a68:	08 95       	ret

00000a6a <LCD_vSend_Char>:
	GPIO_vWRITEPIN(ip ->EN_Port, ip -> EN_Pin, 1);
	_delay_ms(2);
	GPIO_vWRITEPIN(ip ->EN_Port, ip -> EN_Pin, 0);
}

void LCD_vSend_Char(u_int8 data){
     a6a:	cf 93       	push	r28
     a6c:	c8 2f       	mov	r28, r24
	if(ip -> Mode == EIGHT_BIT){
     a6e:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     a72:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     a76:	80 81       	ld	r24, Z
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	b1 f4       	brne	.+44     	; 0xaa8 <LCD_vSend_Char+0x3e>
		GPIO_vWRITEPORT(ip -> LCD_Port, data);
     a7c:	6c 2f       	mov	r22, r28
     a7e:	82 81       	ldd	r24, Z+2	; 0x02
     a80:	0e 94 38 02 	call	0x470	; 0x470 <GPIO_vWRITEPORT>
		GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
     a84:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     a88:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	64 81       	ldd	r22, Z+4	; 0x04
     a90:	83 81       	ldd	r24, Z+3	; 0x03
     a92:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		LCD_vSend_Falling_Edge();
     a96:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
     a9a:	89 ef       	ldi	r24, 0xF9	; 249
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <LCD_vSend_Char+0x34>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <LCD_vSend_Char+0x3a>
     aa4:	00 00       	nop
     aa6:	58 c0       	rjmp	.+176    	; 0xb58 <LCD_vSend_Char+0xee>
		_delay_ms(1);
	}
	else{
		if(ip -> Nibble == HIGH_NIBBLE){
     aa8:	81 81       	ldd	r24, Z+1	; 0x01
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	59 f5       	brne	.+86     	; 0xb04 <LCD_vSend_Char+0x9a>
			GPIO_vHighNibble_write(ip -> LCD_Port, data>>4);
     aae:	6c 2f       	mov	r22, r28
     ab0:	62 95       	swap	r22
     ab2:	6f 70       	andi	r22, 0x0F	; 15
     ab4:	82 81       	ldd	r24, Z+2	; 0x02
     ab6:	0e 94 01 03 	call	0x602	; 0x602 <GPIO_vHighNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
     aba:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     abe:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     ac2:	41 e0       	ldi	r20, 0x01	; 1
     ac4:	64 81       	ldd	r22, Z+4	; 0x04
     ac6:	83 81       	ldd	r24, Z+3	; 0x03
     ac8:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
     acc:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
			GPIO_vHighNibble_write(ip -> LCD_Port, data);
     ad0:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     ad4:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     ad8:	6c 2f       	mov	r22, r28
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	0e 94 01 03 	call	0x602	; 0x602 <GPIO_vHighNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
     ae0:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     ae4:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	64 81       	ldd	r22, Z+4	; 0x04
     aec:	83 81       	ldd	r24, Z+3	; 0x03
     aee:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
     af2:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
     af6:	89 ef       	ldi	r24, 0xF9	; 249
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <LCD_vSend_Char+0x90>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <LCD_vSend_Char+0x96>
     b00:	00 00       	nop
     b02:	2a c0       	rjmp	.+84     	; 0xb58 <LCD_vSend_Char+0xee>
			_delay_ms(1);
		}
		else{
			GPIO_vLowNibble_write(ip -> LCD_Port, data>>4);
     b04:	6c 2f       	mov	r22, r28
     b06:	62 95       	swap	r22
     b08:	6f 70       	andi	r22, 0x0F	; 15
     b0a:	82 81       	ldd	r24, Z+2	; 0x02
     b0c:	0e 94 bf 02 	call	0x57e	; 0x57e <GPIO_vLowNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
     b10:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     b14:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     b18:	41 e0       	ldi	r20, 0x01	; 1
     b1a:	64 81       	ldd	r22, Z+4	; 0x04
     b1c:	83 81       	ldd	r24, Z+3	; 0x03
     b1e:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
     b22:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
			GPIO_vLowNibble_write(ip -> LCD_Port, data);
     b26:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     b2a:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     b2e:	6c 2f       	mov	r22, r28
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	0e 94 bf 02 	call	0x57e	; 0x57e <GPIO_vLowNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
     b36:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <__data_end>
     b3a:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <__data_end+0x1>
     b3e:	41 e0       	ldi	r20, 0x01	; 1
     b40:	64 81       	ldd	r22, Z+4	; 0x04
     b42:	83 81       	ldd	r24, Z+3	; 0x03
     b44:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
     b48:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_vSend_Falling_Edge>
     b4c:	89 ef       	ldi	r24, 0xF9	; 249
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <LCD_vSend_Char+0xe6>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <LCD_vSend_Char+0xec>
     b56:	00 00       	nop
			_delay_ms(1);
		}
	}
}
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <LCD_vSend_String>:

void LCD_vSend_String(u_int8 *ptr){
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	ec 01       	movw	r28, r24
	while((*ptr) != '\0'){
     b62:	88 81       	ld	r24, Y
     b64:	88 23       	and	r24, r24
     b66:	31 f0       	breq	.+12     	; 0xb74 <LCD_vSend_String+0x18>
     b68:	21 96       	adiw	r28, 0x01	; 1
		LCD_vSend_Char(*ptr);
     b6a:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
		}
	}
}

void LCD_vSend_String(u_int8 *ptr){
	while((*ptr) != '\0'){
     b6e:	89 91       	ld	r24, Y+
     b70:	81 11       	cpse	r24, r1
     b72:	fb cf       	rjmp	.-10     	; 0xb6a <LCD_vSend_String+0xe>
		LCD_vSend_Char(*ptr);
		ptr++;
	}
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <LCD_vMove_Cursor>:

void LCD_vMove_Cursor(u_int8 row, u_int8 position){
	u_int8 data;
	if(row > 3 || row < 1 || position > 16 || position < 1){
     b7a:	9f ef       	ldi	r25, 0xFF	; 255
     b7c:	98 0f       	add	r25, r24
     b7e:	93 30       	cpi	r25, 0x03	; 3
     b80:	70 f4       	brcc	.+28     	; 0xb9e <LCD_vMove_Cursor+0x24>
     b82:	9f ef       	ldi	r25, 0xFF	; 255
     b84:	96 0f       	add	r25, r22
     b86:	90 31       	cpi	r25, 0x10	; 16
     b88:	60 f4       	brcc	.+24     	; 0xba2 <LCD_vMove_Cursor+0x28>
		data = 0x80;
	}
	else if(1 == row){
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	19 f4       	brne	.+6      	; 0xb94 <LCD_vMove_Cursor+0x1a>
		data = 0x80 + (position - 1);
     b8e:	2f e7       	ldi	r18, 0x7F	; 127
     b90:	26 0f       	add	r18, r22
     b92:	08 c0       	rjmp	.+16     	; 0xba4 <LCD_vMove_Cursor+0x2a>
	}
	else if(2 == row){
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	31 f4       	brne	.+12     	; 0xba4 <LCD_vMove_Cursor+0x2a>
		data = 0xC0 + (position - 1);
     b98:	2f eb       	ldi	r18, 0xBF	; 191
     b9a:	26 0f       	add	r18, r22
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <LCD_vMove_Cursor+0x2a>
}

void LCD_vMove_Cursor(u_int8 row, u_int8 position){
	u_int8 data;
	if(row > 3 || row < 1 || position > 16 || position < 1){
		data = 0x80;
     b9e:	20 e8       	ldi	r18, 0x80	; 128
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <LCD_vMove_Cursor+0x2a>
     ba2:	20 e8       	ldi	r18, 0x80	; 128
		data = 0x80 + (position - 1);
	}
	else if(2 == row){
		data = 0xC0 + (position - 1);
	}
	LCD_vSend_Cmd(data);
     ba4:	82 2f       	mov	r24, r18
     ba6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     baa:	89 ef       	ldi	r24, 0xF9	; 249
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <LCD_vMove_Cursor+0x34>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <LCD_vMove_Cursor+0x3a>
     bb4:	00 00       	nop
     bb6:	08 95       	ret

00000bb8 <LCD_vClear_Screen>:
	_delay_ms(1);
}

void LCD_vClear_Screen(){
	LCD_vSend_Cmd(LCD_CLEAR_SCREEN);
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_vSend_Cmd>
     bbe:	87 ea       	ldi	r24, 0xA7	; 167
     bc0:	91 e6       	ldi	r25, 0x61	; 97
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <LCD_vClear_Screen+0xa>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <LCD_vClear_Screen+0x10>
     bc8:	00 00       	nop
     bca:	08 95       	ret

00000bcc <LCD_vSend_Number>:
	_delay_ms(100);
}

void LCD_vSend_Number(u_int32 number){
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	27 97       	sbiw	r28, 0x07	; 7
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
	u_int8 str[7];
	sprintf(str, "%d", number);
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	7f 93       	push	r23
     bea:	6f 93       	push	r22
     bec:	80 e7       	ldi	r24, 0x70	; 112
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9f 93       	push	r25
     bf2:	8f 93       	push	r24
     bf4:	8e 01       	movw	r16, r28
     bf6:	0f 5f       	subi	r16, 0xFF	; 255
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	1f 93       	push	r17
     bfc:	0f 93       	push	r16
     bfe:	0e 94 99 08 	call	0x1132	; 0x1132 <sprintf>
	LCD_vSend_String(str);
     c02:	c8 01       	movw	r24, r16
     c04:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
}
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	27 96       	adiw	r28, 0x07	; 7
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <LED_vInit>:

#include "LED_ECU_driver.h"
#define High 1

void LED_vInit(u_int8 portnum, u_int8 pinnum){
	GPIO_vSETPIN_DDR(portnum,pinnum,1);
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
     c2e:	08 95       	ret

00000c30 <LED_vOn>:
}

void LED_vOn(u_int8 portnum, u_int8 pinnum){
	GPIO_vWRITEPIN(portnum,pinnum,1);
     c30:	41 e0       	ldi	r20, 0x01	; 1
     c32:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
     c36:	08 95       	ret

00000c38 <LED_vOff>:
}

void LED_vOff(u_int8 portnum, u_int8 pinnum){
	GPIO_vWRITEPIN(portnum,pinnum,0);
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
     c3e:	08 95       	ret

00000c40 <main>:
#define TRIES  3

u_int8 arr_password[4];

int main(void)
{
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	29 97       	sbiw	r28, 0x09	; 9
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
	u_int8 hash_password = 420;
	OBJ x;
	u_int8 a,b,c,d;
	u_int8 flag = 0;
	/****Drivers Initialization****/
	Keypad_vInit('A');
     c54:	81 e4       	ldi	r24, 0x41	; 65
     c56:	0e 94 36 03 	call	0x66c	; 0x66c <Keypad_vInit>
	LCD_vGet_Config(&x, EIGHT_BIT, HIGH_NIBBLE, 'D', 'B', 0, 'B', 1, 'B', 2);
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	8f 93       	push	r24
     c5e:	0f 2e       	mov	r0, r31
     c60:	f2 e4       	ldi	r31, 0x42	; 66
     c62:	8f 2e       	mov	r8, r31
     c64:	f0 2d       	mov	r31, r0
     c66:	aa 24       	eor	r10, r10
     c68:	a3 94       	inc	r10
     c6a:	0f 2e       	mov	r0, r31
     c6c:	f2 e4       	ldi	r31, 0x42	; 66
     c6e:	cf 2e       	mov	r12, r31
     c70:	f0 2d       	mov	r31, r0
     c72:	e1 2c       	mov	r14, r1
     c74:	02 e4       	ldi	r16, 0x42	; 66
     c76:	24 e4       	ldi	r18, 0x44	; 68
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	0e 94 c0 03 	call	0x780	; 0x780 <LCD_vGet_Config>
	LCD_vInit();
     c84:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_vInit>
	LED_vInit('C', 0);
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	83 e4       	ldi	r24, 0x43	; 67
     c8c:	0e 94 14 06 	call	0xc28	; 0xc28 <LED_vInit>
	LED_vInit('C', 7);
     c90:	67 e0       	ldi	r22, 0x07	; 7
     c92:	83 e4       	ldi	r24, 0x43	; 67
     c94:	0e 94 14 06 	call	0xc28	; 0xc28 <LED_vInit>
	/*****************************/
	/*The code which will be executed when user sets the password 
	for the first time. The password 4 bits will be stored in EEPROM.*/
	if(EEPROM_u8Read(STATUS) == 0xFF){
     c98:	88 e0       	ldi	r24, 0x08	; 8
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 31 03 	call	0x662	; 0x662 <EEPROM_u8Read>
     ca0:	0f 90       	pop	r0
     ca2:	8f 3f       	cpi	r24, 0xFF	; 255
     ca4:	91 05       	cpc	r25, r1
     ca6:	09 f0       	breq	.+2      	; 0xcaa <main+0x6a>
     ca8:	31 c2       	rjmp	.+1122   	; 0x110c <main+0x4cc>
		LCD_vSend_String("Set Password:");
     caa:	8f e7       	ldi	r24, 0x7F	; 127
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
		LCD_vMove_Cursor(2,1);
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		do{
			val = Keypad_u8Check_Press('A');
     cba:	81 e4       	ldi	r24, 0x41	; 65
     cbc:	0e 94 4d 03 	call	0x69a	; 0x69a <Keypad_u8Check_Press>
     cc0:	18 2f       	mov	r17, r24
		}while(val == NOTPRESSED);
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	d1 f3       	breq	.-12     	; 0xcba <main+0x7a>
     cc6:	2f e9       	ldi	r18, 0x9F	; 159
     cc8:	86 e8       	ldi	r24, 0x86	; 134
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	21 50       	subi	r18, 0x01	; 1
     cce:	80 40       	sbci	r24, 0x00	; 0
     cd0:	90 40       	sbci	r25, 0x00	; 0
     cd2:	e1 f7       	brne	.-8      	; 0xccc <main+0x8c>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <main+0x96>
     cd6:	00 00       	nop
		_delay_ms(500);
		LCD_vSend_Char(val);
     cd8:	81 2f       	mov	r24, r17
     cda:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     cde:	ef e7       	ldi	r30, 0x7F	; 127
     ce0:	fa e1       	ldi	r31, 0x1A	; 26
     ce2:	26 e0       	ldi	r18, 0x06	; 6
     ce4:	e1 50       	subi	r30, 0x01	; 1
     ce6:	f0 40       	sbci	r31, 0x00	; 0
     ce8:	20 40       	sbci	r18, 0x00	; 0
     cea:	e1 f7       	brne	.-8      	; 0xce4 <main+0xa4>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <main+0xae>
     cee:	00 00       	nop
		_delay_ms(2000);
		LCD_vMove_Cursor(2,1);
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		LCD_vSend_Char('*');
     cf8:	8a e2       	ldi	r24, 0x2A	; 42
     cfa:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     cfe:	8f e9       	ldi	r24, 0x9F	; 159
     d00:	96 e8       	ldi	r25, 0x86	; 134
     d02:	e1 e0       	ldi	r30, 0x01	; 1
     d04:	81 50       	subi	r24, 0x01	; 1
     d06:	90 40       	sbci	r25, 0x00	; 0
     d08:	e0 40       	sbci	r30, 0x00	; 0
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <main+0xc4>
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <main+0xce>
     d0e:	00 00       	nop
		_delay_ms(500);
		val ^= hash_password;
		EEPROM_vWrite(EEPROM_PASSWORD_LOCATION1, val);
     d10:	64 ea       	ldi	r22, 0xA4	; 164
     d12:	61 27       	eor	r22, r17
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 29 03 	call	0x652	; 0x652 <EEPROM_vWrite>
		val = NOTPRESSED;
		do{
			val = Keypad_u8Check_Press('A');
     d1e:	81 e4       	ldi	r24, 0x41	; 65
     d20:	0e 94 4d 03 	call	0x69a	; 0x69a <Keypad_u8Check_Press>
     d24:	18 2f       	mov	r17, r24
		}while(val == NOTPRESSED);
     d26:	8f 3f       	cpi	r24, 0xFF	; 255
     d28:	d1 f3       	breq	.-12     	; 0xd1e <main+0xde>
     d2a:	ff e9       	ldi	r31, 0x9F	; 159
     d2c:	26 e8       	ldi	r18, 0x86	; 134
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	f1 50       	subi	r31, 0x01	; 1
     d32:	20 40       	sbci	r18, 0x00	; 0
     d34:	80 40       	sbci	r24, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <main+0xf0>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <main+0xfa>
     d3a:	00 00       	nop
		_delay_ms(500);
		LCD_vSend_Char(val);
     d3c:	81 2f       	mov	r24, r17
     d3e:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     d42:	9f e7       	ldi	r25, 0x7F	; 127
     d44:	ea e1       	ldi	r30, 0x1A	; 26
     d46:	f6 e0       	ldi	r31, 0x06	; 6
     d48:	91 50       	subi	r25, 0x01	; 1
     d4a:	e0 40       	sbci	r30, 0x00	; 0
     d4c:	f0 40       	sbci	r31, 0x00	; 0
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <main+0x108>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <main+0x112>
     d52:	00 00       	nop
		_delay_ms(2000);
		LCD_vMove_Cursor(2,2);
     d54:	62 e0       	ldi	r22, 0x02	; 2
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		LCD_vSend_Char('*');
     d5c:	8a e2       	ldi	r24, 0x2A	; 42
     d5e:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     d62:	2f e9       	ldi	r18, 0x9F	; 159
     d64:	86 e8       	ldi	r24, 0x86	; 134
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	21 50       	subi	r18, 0x01	; 1
     d6a:	80 40       	sbci	r24, 0x00	; 0
     d6c:	90 40       	sbci	r25, 0x00	; 0
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <main+0x128>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <main+0x132>
     d72:	00 00       	nop
		_delay_ms(500);
		val ^= hash_password;
		EEPROM_vWrite(EEPROM_PASSWORD_LOCATION2, val);
     d74:	64 ea       	ldi	r22, 0xA4	; 164
     d76:	61 27       	eor	r22, r17
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 29 03 	call	0x652	; 0x652 <EEPROM_vWrite>
		val = NOTPRESSED;
		do{
			val = Keypad_u8Check_Press('A');
     d82:	81 e4       	ldi	r24, 0x41	; 65
     d84:	0e 94 4d 03 	call	0x69a	; 0x69a <Keypad_u8Check_Press>
     d88:	18 2f       	mov	r17, r24
		}while(val == NOTPRESSED);
     d8a:	8f 3f       	cpi	r24, 0xFF	; 255
     d8c:	d1 f3       	breq	.-12     	; 0xd82 <main+0x142>
     d8e:	ef e9       	ldi	r30, 0x9F	; 159
     d90:	f6 e8       	ldi	r31, 0x86	; 134
     d92:	21 e0       	ldi	r18, 0x01	; 1
     d94:	e1 50       	subi	r30, 0x01	; 1
     d96:	f0 40       	sbci	r31, 0x00	; 0
     d98:	20 40       	sbci	r18, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <main+0x154>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <main+0x15e>
     d9e:	00 00       	nop
		_delay_ms(500);
		LCD_vSend_Char(val);
     da0:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     da4:	8f e7       	ldi	r24, 0x7F	; 127
     da6:	9a e1       	ldi	r25, 0x1A	; 26
     da8:	e6 e0       	ldi	r30, 0x06	; 6
     daa:	81 50       	subi	r24, 0x01	; 1
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	e0 40       	sbci	r30, 0x00	; 0
     db0:	e1 f7       	brne	.-8      	; 0xdaa <main+0x16a>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <main+0x174>
     db4:	00 00       	nop
		_delay_ms(2000);
		LCD_vMove_Cursor(2,3);
     db6:	63 e0       	ldi	r22, 0x03	; 3
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		LCD_vSend_Char('*');
     dbe:	8a e2       	ldi	r24, 0x2A	; 42
     dc0:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     dc4:	ff e9       	ldi	r31, 0x9F	; 159
     dc6:	26 e8       	ldi	r18, 0x86	; 134
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	f1 50       	subi	r31, 0x01	; 1
     dcc:	20 40       	sbci	r18, 0x00	; 0
     dce:	80 40       	sbci	r24, 0x00	; 0
     dd0:	e1 f7       	brne	.-8      	; 0xdca <main+0x18a>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <main+0x194>
     dd4:	00 00       	nop
		_delay_ms(500);
		val ^= hash_password;
		EEPROM_vWrite(EEPROM_PASSWORD_LOCATION3, val);
     dd6:	64 ea       	ldi	r22, 0xA4	; 164
     dd8:	61 27       	eor	r22, r17
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 29 03 	call	0x652	; 0x652 <EEPROM_vWrite>
		val = NOTPRESSED;
		do{
			val = Keypad_u8Check_Press('A');
     de4:	81 e4       	ldi	r24, 0x41	; 65
     de6:	0e 94 4d 03 	call	0x69a	; 0x69a <Keypad_u8Check_Press>
     dea:	18 2f       	mov	r17, r24
		}while(val == NOTPRESSED);
     dec:	8f 3f       	cpi	r24, 0xFF	; 255
     dee:	d1 f3       	breq	.-12     	; 0xde4 <main+0x1a4>
     df0:	9f e9       	ldi	r25, 0x9F	; 159
     df2:	e6 e8       	ldi	r30, 0x86	; 134
     df4:	f1 e0       	ldi	r31, 0x01	; 1
     df6:	91 50       	subi	r25, 0x01	; 1
     df8:	e0 40       	sbci	r30, 0x00	; 0
     dfa:	f0 40       	sbci	r31, 0x00	; 0
     dfc:	e1 f7       	brne	.-8      	; 0xdf6 <main+0x1b6>
     dfe:	00 c0       	rjmp	.+0      	; 0xe00 <main+0x1c0>
     e00:	00 00       	nop
		_delay_ms(500);
		LCD_vSend_Char(val);
     e02:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     e06:	2f e7       	ldi	r18, 0x7F	; 127
     e08:	8a e1       	ldi	r24, 0x1A	; 26
     e0a:	96 e0       	ldi	r25, 0x06	; 6
     e0c:	21 50       	subi	r18, 0x01	; 1
     e0e:	80 40       	sbci	r24, 0x00	; 0
     e10:	90 40       	sbci	r25, 0x00	; 0
     e12:	e1 f7       	brne	.-8      	; 0xe0c <main+0x1cc>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <main+0x1d6>
     e16:	00 00       	nop
		_delay_ms(2000);
		LCD_vMove_Cursor(2,4);
     e18:	64 e0       	ldi	r22, 0x04	; 4
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		LCD_vSend_Char('*');
     e20:	8a e2       	ldi	r24, 0x2A	; 42
     e22:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     e26:	ef e9       	ldi	r30, 0x9F	; 159
     e28:	f6 e8       	ldi	r31, 0x86	; 134
     e2a:	21 e0       	ldi	r18, 0x01	; 1
     e2c:	e1 50       	subi	r30, 0x01	; 1
     e2e:	f0 40       	sbci	r31, 0x00	; 0
     e30:	20 40       	sbci	r18, 0x00	; 0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <main+0x1ec>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <main+0x1f6>
     e36:	00 00       	nop
		_delay_ms(500);
		val ^= hash_password;
		EEPROM_vWrite(EEPROM_PASSWORD_LOCATION4, val);
     e38:	64 ea       	ldi	r22, 0xA4	; 164
     e3a:	61 27       	eor	r22, r17
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 29 03 	call	0x652	; 0x652 <EEPROM_vWrite>
		val = NOTPRESSED;
		//Status will be changed.
		EEPROM_vWrite(STATUS, 0x00);
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 29 03 	call	0x652	; 0x652 <EEPROM_vWrite>
     e52:	5c c1       	rjmp	.+696    	; 0x110c <main+0x4cc>
	}
	/************************************************************/
	/*This is the code which will be executed after setting the password.
	and it enables the user to enter his password to open the safe.*/
	while(flag == 0){
		arr_password[0] = arr_password[1] = arr_password[2] = arr_password[3] = NOTPRESSED;
     e54:	f8 01       	movw	r30, r16
     e56:	e3 82       	std	Z+3, r14	; 0x03
     e58:	e2 82       	std	Z+2, r14	; 0x02
     e5a:	e1 82       	std	Z+1, r14	; 0x01
     e5c:	e0 82       	st	Z, r14
		LCD_vClear_Screen();
     e5e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <LCD_vClear_Screen>
		LCD_vSend_String("Enter Password:");
     e62:	8d e8       	ldi	r24, 0x8D	; 141
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
		LCD_vMove_Cursor(2,1);
     e6a:	61 e0       	ldi	r22, 0x01	; 1
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		do{
			arr_password[0] = Keypad_u8Check_Press('A');
     e72:	81 e4       	ldi	r24, 0x41	; 65
     e74:	0e 94 4d 03 	call	0x69a	; 0x69a <Keypad_u8Check_Press>
     e78:	f8 01       	movw	r30, r16
     e7a:	80 83       	st	Z, r24
		}while(arr_password[0] == NOTPRESSED);
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	c9 f3       	breq	.-14     	; 0xe72 <main+0x232>
     e80:	ff e9       	ldi	r31, 0x9F	; 159
     e82:	26 e8       	ldi	r18, 0x86	; 134
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	f1 50       	subi	r31, 0x01	; 1
     e88:	20 40       	sbci	r18, 0x00	; 0
     e8a:	80 40       	sbci	r24, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <main+0x246>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <main+0x250>
     e90:	00 00       	nop
		_delay_ms(500);
		LCD_vSend_Char(arr_password[0]);
     e92:	f8 01       	movw	r30, r16
     e94:	80 81       	ld	r24, Z
     e96:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     e9a:	ff e7       	ldi	r31, 0x7F	; 127
     e9c:	2a e1       	ldi	r18, 0x1A	; 26
     e9e:	86 e0       	ldi	r24, 0x06	; 6
     ea0:	f1 50       	subi	r31, 0x01	; 1
     ea2:	20 40       	sbci	r18, 0x00	; 0
     ea4:	80 40       	sbci	r24, 0x00	; 0
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <main+0x260>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <main+0x26a>
     eaa:	00 00       	nop
		_delay_ms(2000);
		LCD_vMove_Cursor(2,1);
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		LCD_vSend_Char('*');
     eb4:	8a e2       	ldi	r24, 0x2A	; 42
     eb6:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     eba:	9f e9       	ldi	r25, 0x9F	; 159
     ebc:	e6 e8       	ldi	r30, 0x86	; 134
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	91 50       	subi	r25, 0x01	; 1
     ec2:	e0 40       	sbci	r30, 0x00	; 0
     ec4:	f0 40       	sbci	r31, 0x00	; 0
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <main+0x280>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <main+0x28a>
     eca:	00 00       	nop
		_delay_ms(500);
		do{
			arr_password[1] = Keypad_u8Check_Press('A');
     ecc:	81 e4       	ldi	r24, 0x41	; 65
     ece:	0e 94 4d 03 	call	0x69a	; 0x69a <Keypad_u8Check_Press>
     ed2:	f8 01       	movw	r30, r16
     ed4:	81 83       	std	Z+1, r24	; 0x01
		}while(arr_password[1] == NOTPRESSED);
     ed6:	8f 3f       	cpi	r24, 0xFF	; 255
     ed8:	c9 f3       	breq	.-14     	; 0xecc <main+0x28c>
     eda:	ff e9       	ldi	r31, 0x9F	; 159
     edc:	26 e8       	ldi	r18, 0x86	; 134
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	f1 50       	subi	r31, 0x01	; 1
     ee2:	20 40       	sbci	r18, 0x00	; 0
     ee4:	80 40       	sbci	r24, 0x00	; 0
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <main+0x2a0>
     ee8:	00 c0       	rjmp	.+0      	; 0xeea <main+0x2aa>
     eea:	00 00       	nop
		_delay_ms(500);
		LCD_vSend_Char(arr_password[1]);
     eec:	f8 01       	movw	r30, r16
     eee:	81 81       	ldd	r24, Z+1	; 0x01
     ef0:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     ef4:	ff e7       	ldi	r31, 0x7F	; 127
     ef6:	2a e1       	ldi	r18, 0x1A	; 26
     ef8:	86 e0       	ldi	r24, 0x06	; 6
     efa:	f1 50       	subi	r31, 0x01	; 1
     efc:	20 40       	sbci	r18, 0x00	; 0
     efe:	80 40       	sbci	r24, 0x00	; 0
     f00:	e1 f7       	brne	.-8      	; 0xefa <main+0x2ba>
     f02:	00 c0       	rjmp	.+0      	; 0xf04 <main+0x2c4>
     f04:	00 00       	nop
		_delay_ms(2000);
		LCD_vMove_Cursor(2,2);
     f06:	62 e0       	ldi	r22, 0x02	; 2
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		LCD_vSend_Char('*');
     f0e:	8a e2       	ldi	r24, 0x2A	; 42
     f10:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     f14:	9f e9       	ldi	r25, 0x9F	; 159
     f16:	e6 e8       	ldi	r30, 0x86	; 134
     f18:	f1 e0       	ldi	r31, 0x01	; 1
     f1a:	91 50       	subi	r25, 0x01	; 1
     f1c:	e0 40       	sbci	r30, 0x00	; 0
     f1e:	f0 40       	sbci	r31, 0x00	; 0
     f20:	e1 f7       	brne	.-8      	; 0xf1a <main+0x2da>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <main+0x2e4>
     f24:	00 00       	nop
		_delay_ms(500);
		do{
			arr_password[2] = Keypad_u8Check_Press('A');
     f26:	81 e4       	ldi	r24, 0x41	; 65
     f28:	0e 94 4d 03 	call	0x69a	; 0x69a <Keypad_u8Check_Press>
     f2c:	f8 01       	movw	r30, r16
     f2e:	82 83       	std	Z+2, r24	; 0x02
		}while(arr_password[2] == NOTPRESSED);
     f30:	8f 3f       	cpi	r24, 0xFF	; 255
     f32:	c9 f3       	breq	.-14     	; 0xf26 <main+0x2e6>
     f34:	ff e9       	ldi	r31, 0x9F	; 159
     f36:	26 e8       	ldi	r18, 0x86	; 134
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	f1 50       	subi	r31, 0x01	; 1
     f3c:	20 40       	sbci	r18, 0x00	; 0
     f3e:	80 40       	sbci	r24, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <main+0x2fa>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <main+0x304>
     f44:	00 00       	nop
		_delay_ms(500);
		LCD_vSend_Char(arr_password[2]);
     f46:	f8 01       	movw	r30, r16
     f48:	82 81       	ldd	r24, Z+2	; 0x02
     f4a:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     f4e:	ff e7       	ldi	r31, 0x7F	; 127
     f50:	2a e1       	ldi	r18, 0x1A	; 26
     f52:	86 e0       	ldi	r24, 0x06	; 6
     f54:	f1 50       	subi	r31, 0x01	; 1
     f56:	20 40       	sbci	r18, 0x00	; 0
     f58:	80 40       	sbci	r24, 0x00	; 0
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <main+0x314>
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <main+0x31e>
     f5e:	00 00       	nop
		_delay_ms(2000);
		LCD_vMove_Cursor(2,3);
     f60:	63 e0       	ldi	r22, 0x03	; 3
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		LCD_vSend_Char('*');
     f68:	8a e2       	ldi	r24, 0x2A	; 42
     f6a:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     f6e:	9f e9       	ldi	r25, 0x9F	; 159
     f70:	e6 e8       	ldi	r30, 0x86	; 134
     f72:	f1 e0       	ldi	r31, 0x01	; 1
     f74:	91 50       	subi	r25, 0x01	; 1
     f76:	e0 40       	sbci	r30, 0x00	; 0
     f78:	f0 40       	sbci	r31, 0x00	; 0
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <main+0x334>
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <main+0x33e>
     f7e:	00 00       	nop
		_delay_ms(500);
		do{
			arr_password[3] = Keypad_u8Check_Press('A');
     f80:	81 e4       	ldi	r24, 0x41	; 65
     f82:	0e 94 4d 03 	call	0x69a	; 0x69a <Keypad_u8Check_Press>
     f86:	f8 01       	movw	r30, r16
     f88:	83 83       	std	Z+3, r24	; 0x03
		}while(arr_password[3] == NOTPRESSED);
     f8a:	8f 3f       	cpi	r24, 0xFF	; 255
     f8c:	c9 f3       	breq	.-14     	; 0xf80 <main+0x340>
     f8e:	ff e9       	ldi	r31, 0x9F	; 159
     f90:	26 e8       	ldi	r18, 0x86	; 134
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	f1 50       	subi	r31, 0x01	; 1
     f96:	20 40       	sbci	r18, 0x00	; 0
     f98:	80 40       	sbci	r24, 0x00	; 0
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <main+0x354>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <main+0x35e>
     f9e:	00 00       	nop
		_delay_ms(500);
		LCD_vSend_Char(arr_password[3]);
     fa0:	f8 01       	movw	r30, r16
     fa2:	83 81       	ldd	r24, Z+3	; 0x03
     fa4:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     fa8:	ff e7       	ldi	r31, 0x7F	; 127
     faa:	2a e1       	ldi	r18, 0x1A	; 26
     fac:	86 e0       	ldi	r24, 0x06	; 6
     fae:	f1 50       	subi	r31, 0x01	; 1
     fb0:	20 40       	sbci	r18, 0x00	; 0
     fb2:	80 40       	sbci	r24, 0x00	; 0
     fb4:	e1 f7       	brne	.-8      	; 0xfae <main+0x36e>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <main+0x378>
     fb8:	00 00       	nop
		_delay_ms(2000);
		LCD_vMove_Cursor(2,4);
     fba:	64 e0       	ldi	r22, 0x04	; 4
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
		LCD_vSend_Char('*');
     fc2:	8a e2       	ldi	r24, 0x2A	; 42
     fc4:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_vSend_Char>
     fc8:	9f e9       	ldi	r25, 0x9F	; 159
     fca:	e6 e8       	ldi	r30, 0x86	; 134
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	91 50       	subi	r25, 0x01	; 1
     fd0:	e0 40       	sbci	r30, 0x00	; 0
     fd2:	f0 40       	sbci	r31, 0x00	; 0
     fd4:	e1 f7       	brne	.-8      	; 0xfce <main+0x38e>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <main+0x398>
     fd8:	00 00       	nop
		_delay_ms(500);
		//Now, It is Encryption time.
		//The password entered by the user will be encrypted in order to 
		//prevent any hacking to the EEPROM values.
		a = EEPROM_u8Read(EEPROM_PASSWORD_LOCATION1);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 31 03 	call	0x662	; 0x662 <EEPROM_u8Read>
     fe2:	a8 2e       	mov	r10, r24
		a ^= hash_password;
		b = EEPROM_u8Read(EEPROM_PASSWORD_LOCATION2);
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 31 03 	call	0x662	; 0x662 <EEPROM_u8Read>
     fec:	b8 2e       	mov	r11, r24
		b ^= hash_password;
		c = EEPROM_u8Read(EEPROM_PASSWORD_LOCATION3);
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 31 03 	call	0x662	; 0x662 <EEPROM_u8Read>
     ff6:	c8 2e       	mov	r12, r24
		c ^= hash_password;
		d = EEPROM_u8Read(EEPROM_PASSWORD_LOCATION4);
     ff8:	84 e0       	ldi	r24, 0x04	; 4
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 31 03 	call	0x662	; 0x662 <EEPROM_u8Read>
		d ^= hash_password;
		/**************************************************************/
		//Comparison between the stored password bits in EEPROM &
		//the entered values using the keypad.
		if(a == arr_password[0] && b == arr_password[1] && c == arr_password[2] && d == arr_password[3]){
    1000:	af 24       	eor	r10, r15
    1002:	f8 01       	movw	r30, r16
    1004:	90 81       	ld	r25, Z
    1006:	a9 12       	cpse	r10, r25
    1008:	1f c0       	rjmp	.+62     	; 0x1048 <main+0x408>
    100a:	bf 24       	eor	r11, r15
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	b9 12       	cpse	r11, r25
    1010:	1b c0       	rjmp	.+54     	; 0x1048 <main+0x408>
    1012:	cf 24       	eor	r12, r15
    1014:	92 81       	ldd	r25, Z+2	; 0x02
    1016:	c9 12       	cpse	r12, r25
    1018:	17 c0       	rjmp	.+46     	; 0x1048 <main+0x408>
    101a:	8f 25       	eor	r24, r15
    101c:	93 81       	ldd	r25, Z+3	; 0x03
    101e:	89 13       	cpse	r24, r25
    1020:	13 c0       	rjmp	.+38     	; 0x1048 <main+0x408>
			LCD_vClear_Screen();
    1022:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <LCD_vClear_Screen>
			LCD_vSend_String("Right Password");
    1026:	8d e9       	ldi	r24, 0x9D	; 157
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
			LCD_vMove_Cursor(2,1);
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
			LCD_vSend_String("Safe is Unlocked");
    1036:	8c ea       	ldi	r24, 0xAC	; 172
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
			LED_vOn('C', 7);
    103e:	67 e0       	ldi	r22, 0x07	; 7
    1040:	83 e4       	ldi	r24, 0x43	; 67
    1042:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_vOn>
    1046:	61 c0       	rjmp	.+194    	; 0x110a <main+0x4ca>
			flag = 1;
		}
		else{
			tries -= 1;
    1048:	da 94       	dec	r13
			if(tries > 0){
    104a:	dd 20       	and	r13, r13
    104c:	79 f1       	breq	.+94     	; 0x10ac <main+0x46c>
				LCD_vClear_Screen();
    104e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <LCD_vClear_Screen>
				LCD_vSend_String("Wrong Password");
    1052:	8d eb       	ldi	r24, 0xBD	; 189
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
				LCD_vMove_Cursor(2, 1);
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
				LCD_vSend_String("Tries left=");
    1062:	8c ec       	ldi	r24, 0xCC	; 204
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
				LCD_vSend_Number(tries);
    106a:	6d 2d       	mov	r22, r13
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 e6 05 	call	0xbcc	; 0xbcc <LCD_vSend_Number>
				LED_vOn('C', 0);
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	83 e4       	ldi	r24, 0x43	; 67
    107a:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_vOn>
    107e:	ff e3       	ldi	r31, 0x3F	; 63
    1080:	22 e4       	ldi	r18, 0x42	; 66
    1082:	8f e0       	ldi	r24, 0x0F	; 15
    1084:	f1 50       	subi	r31, 0x01	; 1
    1086:	20 40       	sbci	r18, 0x00	; 0
    1088:	80 40       	sbci	r24, 0x00	; 0
    108a:	e1 f7       	brne	.-8      	; 0x1084 <main+0x444>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <main+0x44e>
    108e:	00 00       	nop
				_delay_ms(5000);
				LED_vOff('C', 0);
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	83 e4       	ldi	r24, 0x43	; 67
    1094:	0e 94 1c 06 	call	0xc38	; 0xc38 <LED_vOff>
    1098:	9f e3       	ldi	r25, 0x3F	; 63
    109a:	e2 e4       	ldi	r30, 0x42	; 66
    109c:	ff e0       	ldi	r31, 0x0F	; 15
    109e:	91 50       	subi	r25, 0x01	; 1
    10a0:	e0 40       	sbci	r30, 0x00	; 0
    10a2:	f0 40       	sbci	r31, 0x00	; 0
    10a4:	e1 f7       	brne	.-8      	; 0x109e <main+0x45e>
    10a6:	00 c0       	rjmp	.+0      	; 0x10a8 <main+0x468>
    10a8:	00 00       	nop
    10aa:	d4 ce       	rjmp	.-600    	; 0xe54 <main+0x214>
				_delay_ms(5000);
			}
			else{
				LCD_vClear_Screen();
    10ac:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <LCD_vClear_Screen>
				LCD_vSend_String("Wrong Password");
    10b0:	8d eb       	ldi	r24, 0xBD	; 189
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
				LCD_vMove_Cursor(2, 1);
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_vMove_Cursor>
				LCD_vSend_String("Tries left=");
    10c0:	8c ec       	ldi	r24, 0xCC	; 204
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
				LCD_vSend_Number(tries);
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	cb 01       	movw	r24, r22
    10ce:	0e 94 e6 05 	call	0xbcc	; 0xbcc <LCD_vSend_Number>
				LED_vOn('C', 0);
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	83 e4       	ldi	r24, 0x43	; 67
    10d6:	0e 94 18 06 	call	0xc30	; 0xc30 <LED_vOn>
    10da:	2f e3       	ldi	r18, 0x3F	; 63
    10dc:	82 e4       	ldi	r24, 0x42	; 66
    10de:	9f e0       	ldi	r25, 0x0F	; 15
    10e0:	21 50       	subi	r18, 0x01	; 1
    10e2:	80 40       	sbci	r24, 0x00	; 0
    10e4:	90 40       	sbci	r25, 0x00	; 0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <main+0x4a0>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <main+0x4aa>
    10ea:	00 00       	nop
				_delay_ms(5000);
				LCD_vClear_Screen();
    10ec:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <LCD_vClear_Screen>
				LCD_vSend_String("Safe is Closed");
    10f0:	88 ed       	ldi	r24, 0xD8	; 216
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCD_vSend_String>
    10f8:	ef e3       	ldi	r30, 0x3F	; 63
    10fa:	f2 e4       	ldi	r31, 0x42	; 66
    10fc:	2f e0       	ldi	r18, 0x0F	; 15
    10fe:	e1 50       	subi	r30, 0x01	; 1
    1100:	f0 40       	sbci	r31, 0x00	; 0
    1102:	20 40       	sbci	r18, 0x00	; 0
    1104:	e1 f7       	brne	.-8      	; 0x10fe <main+0x4be>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <main+0x4c8>
    1108:	00 00       	nop
    110a:	ff cf       	rjmp	.-2      	; 0x110a <main+0x4ca>
#define TRIES  3

u_int8 arr_password[4];

int main(void)
{
    110c:	0f 2e       	mov	r0, r31
    110e:	f3 e0       	ldi	r31, 0x03	; 3
    1110:	df 2e       	mov	r13, r31
    1112:	f0 2d       	mov	r31, r0
	}
	/************************************************************/
	/*This is the code which will be executed after setting the password.
	and it enables the user to enter his password to open the safe.*/
	while(flag == 0){
		arr_password[0] = arr_password[1] = arr_password[2] = arr_password[3] = NOTPRESSED;
    1114:	0a ee       	ldi	r16, 0xEA	; 234
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	ee 24       	eor	r14, r14
    111a:	ea 94       	dec	r14
		d = EEPROM_u8Read(EEPROM_PASSWORD_LOCATION4);
		d ^= hash_password;
		/**************************************************************/
		//Comparison between the stored password bits in EEPROM &
		//the entered values using the keypad.
		if(a == arr_password[0] && b == arr_password[1] && c == arr_password[2] && d == arr_password[3]){
    111c:	0f 2e       	mov	r0, r31
    111e:	f4 ea       	ldi	r31, 0xA4	; 164
    1120:	ff 2e       	mov	r15, r31
    1122:	f0 2d       	mov	r31, r0
    1124:	97 ce       	rjmp	.-722    	; 0xe54 <main+0x214>

00001126 <__tablejump2__>:
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	05 90       	lpm	r0, Z+
    112c:	f4 91       	lpm	r31, Z
    112e:	e0 2d       	mov	r30, r0
    1130:	09 94       	ijmp

00001132 <sprintf>:
    1132:	ae e0       	ldi	r26, 0x0E	; 14
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	ef e9       	ldi	r30, 0x9F	; 159
    1138:	f8 e0       	ldi	r31, 0x08	; 8
    113a:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__prologue_saves__+0x1c>
    113e:	0d 89       	ldd	r16, Y+21	; 0x15
    1140:	1e 89       	ldd	r17, Y+22	; 0x16
    1142:	86 e0       	ldi	r24, 0x06	; 6
    1144:	8c 83       	std	Y+4, r24	; 0x04
    1146:	1a 83       	std	Y+2, r17	; 0x02
    1148:	09 83       	std	Y+1, r16	; 0x01
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	9f e7       	ldi	r25, 0x7F	; 127
    114e:	9e 83       	std	Y+6, r25	; 0x06
    1150:	8d 83       	std	Y+5, r24	; 0x05
    1152:	ae 01       	movw	r20, r28
    1154:	47 5e       	subi	r20, 0xE7	; 231
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	6f 89       	ldd	r22, Y+23	; 0x17
    115a:	78 8d       	ldd	r23, Y+24	; 0x18
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	0e 94 bb 08 	call	0x1176	; 0x1176 <vfprintf>
    1164:	ef 81       	ldd	r30, Y+7	; 0x07
    1166:	f8 85       	ldd	r31, Y+8	; 0x08
    1168:	e0 0f       	add	r30, r16
    116a:	f1 1f       	adc	r31, r17
    116c:	10 82       	st	Z, r1
    116e:	2e 96       	adiw	r28, 0x0e	; 14
    1170:	e4 e0       	ldi	r30, 0x04	; 4
    1172:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__epilogue_restores__+0x1c>

00001176 <vfprintf>:
    1176:	ab e0       	ldi	r26, 0x0B	; 11
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e1 ec       	ldi	r30, 0xC1	; 193
    117c:	f8 e0       	ldi	r31, 0x08	; 8
    117e:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__prologue_saves__>
    1182:	6c 01       	movw	r12, r24
    1184:	7b 01       	movw	r14, r22
    1186:	8a 01       	movw	r16, r20
    1188:	fc 01       	movw	r30, r24
    118a:	17 82       	std	Z+7, r1	; 0x07
    118c:	16 82       	std	Z+6, r1	; 0x06
    118e:	83 81       	ldd	r24, Z+3	; 0x03
    1190:	81 ff       	sbrs	r24, 1
    1192:	cc c1       	rjmp	.+920    	; 0x152c <vfprintf+0x3b6>
    1194:	ce 01       	movw	r24, r28
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	3c 01       	movw	r6, r24
    119a:	f6 01       	movw	r30, r12
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	f7 01       	movw	r30, r14
    11a0:	93 fd       	sbrc	r25, 3
    11a2:	85 91       	lpm	r24, Z+
    11a4:	93 ff       	sbrs	r25, 3
    11a6:	81 91       	ld	r24, Z+
    11a8:	7f 01       	movw	r14, r30
    11aa:	88 23       	and	r24, r24
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <vfprintf+0x3a>
    11ae:	ba c1       	rjmp	.+884    	; 0x1524 <vfprintf+0x3ae>
    11b0:	85 32       	cpi	r24, 0x25	; 37
    11b2:	39 f4       	brne	.+14     	; 0x11c2 <vfprintf+0x4c>
    11b4:	93 fd       	sbrc	r25, 3
    11b6:	85 91       	lpm	r24, Z+
    11b8:	93 ff       	sbrs	r25, 3
    11ba:	81 91       	ld	r24, Z+
    11bc:	7f 01       	movw	r14, r30
    11be:	85 32       	cpi	r24, 0x25	; 37
    11c0:	29 f4       	brne	.+10     	; 0x11cc <vfprintf+0x56>
    11c2:	b6 01       	movw	r22, r12
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fputc>
    11ca:	e7 cf       	rjmp	.-50     	; 0x119a <vfprintf+0x24>
    11cc:	91 2c       	mov	r9, r1
    11ce:	21 2c       	mov	r2, r1
    11d0:	31 2c       	mov	r3, r1
    11d2:	ff e1       	ldi	r31, 0x1F	; 31
    11d4:	f3 15       	cp	r31, r3
    11d6:	d8 f0       	brcs	.+54     	; 0x120e <vfprintf+0x98>
    11d8:	8b 32       	cpi	r24, 0x2B	; 43
    11da:	79 f0       	breq	.+30     	; 0x11fa <vfprintf+0x84>
    11dc:	38 f4       	brcc	.+14     	; 0x11ec <vfprintf+0x76>
    11de:	80 32       	cpi	r24, 0x20	; 32
    11e0:	79 f0       	breq	.+30     	; 0x1200 <vfprintf+0x8a>
    11e2:	83 32       	cpi	r24, 0x23	; 35
    11e4:	a1 f4       	brne	.+40     	; 0x120e <vfprintf+0x98>
    11e6:	23 2d       	mov	r18, r3
    11e8:	20 61       	ori	r18, 0x10	; 16
    11ea:	1d c0       	rjmp	.+58     	; 0x1226 <vfprintf+0xb0>
    11ec:	8d 32       	cpi	r24, 0x2D	; 45
    11ee:	61 f0       	breq	.+24     	; 0x1208 <vfprintf+0x92>
    11f0:	80 33       	cpi	r24, 0x30	; 48
    11f2:	69 f4       	brne	.+26     	; 0x120e <vfprintf+0x98>
    11f4:	23 2d       	mov	r18, r3
    11f6:	21 60       	ori	r18, 0x01	; 1
    11f8:	16 c0       	rjmp	.+44     	; 0x1226 <vfprintf+0xb0>
    11fa:	83 2d       	mov	r24, r3
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	38 2e       	mov	r3, r24
    1200:	e3 2d       	mov	r30, r3
    1202:	e4 60       	ori	r30, 0x04	; 4
    1204:	3e 2e       	mov	r3, r30
    1206:	2a c0       	rjmp	.+84     	; 0x125c <vfprintf+0xe6>
    1208:	f3 2d       	mov	r31, r3
    120a:	f8 60       	ori	r31, 0x08	; 8
    120c:	1d c0       	rjmp	.+58     	; 0x1248 <vfprintf+0xd2>
    120e:	37 fc       	sbrc	r3, 7
    1210:	2d c0       	rjmp	.+90     	; 0x126c <vfprintf+0xf6>
    1212:	20 ed       	ldi	r18, 0xD0	; 208
    1214:	28 0f       	add	r18, r24
    1216:	2a 30       	cpi	r18, 0x0A	; 10
    1218:	40 f0       	brcs	.+16     	; 0x122a <vfprintf+0xb4>
    121a:	8e 32       	cpi	r24, 0x2E	; 46
    121c:	b9 f4       	brne	.+46     	; 0x124c <vfprintf+0xd6>
    121e:	36 fc       	sbrc	r3, 6
    1220:	81 c1       	rjmp	.+770    	; 0x1524 <vfprintf+0x3ae>
    1222:	23 2d       	mov	r18, r3
    1224:	20 64       	ori	r18, 0x40	; 64
    1226:	32 2e       	mov	r3, r18
    1228:	19 c0       	rjmp	.+50     	; 0x125c <vfprintf+0xe6>
    122a:	36 fe       	sbrs	r3, 6
    122c:	06 c0       	rjmp	.+12     	; 0x123a <vfprintf+0xc4>
    122e:	8a e0       	ldi	r24, 0x0A	; 10
    1230:	98 9e       	mul	r9, r24
    1232:	20 0d       	add	r18, r0
    1234:	11 24       	eor	r1, r1
    1236:	92 2e       	mov	r9, r18
    1238:	11 c0       	rjmp	.+34     	; 0x125c <vfprintf+0xe6>
    123a:	ea e0       	ldi	r30, 0x0A	; 10
    123c:	2e 9e       	mul	r2, r30
    123e:	20 0d       	add	r18, r0
    1240:	11 24       	eor	r1, r1
    1242:	22 2e       	mov	r2, r18
    1244:	f3 2d       	mov	r31, r3
    1246:	f0 62       	ori	r31, 0x20	; 32
    1248:	3f 2e       	mov	r3, r31
    124a:	08 c0       	rjmp	.+16     	; 0x125c <vfprintf+0xe6>
    124c:	8c 36       	cpi	r24, 0x6C	; 108
    124e:	21 f4       	brne	.+8      	; 0x1258 <vfprintf+0xe2>
    1250:	83 2d       	mov	r24, r3
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	38 2e       	mov	r3, r24
    1256:	02 c0       	rjmp	.+4      	; 0x125c <vfprintf+0xe6>
    1258:	88 36       	cpi	r24, 0x68	; 104
    125a:	41 f4       	brne	.+16     	; 0x126c <vfprintf+0xf6>
    125c:	f7 01       	movw	r30, r14
    125e:	93 fd       	sbrc	r25, 3
    1260:	85 91       	lpm	r24, Z+
    1262:	93 ff       	sbrs	r25, 3
    1264:	81 91       	ld	r24, Z+
    1266:	7f 01       	movw	r14, r30
    1268:	81 11       	cpse	r24, r1
    126a:	b3 cf       	rjmp	.-154    	; 0x11d2 <vfprintf+0x5c>
    126c:	98 2f       	mov	r25, r24
    126e:	9f 7d       	andi	r25, 0xDF	; 223
    1270:	95 54       	subi	r25, 0x45	; 69
    1272:	93 30       	cpi	r25, 0x03	; 3
    1274:	28 f4       	brcc	.+10     	; 0x1280 <vfprintf+0x10a>
    1276:	0c 5f       	subi	r16, 0xFC	; 252
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	9f e3       	ldi	r25, 0x3F	; 63
    127c:	99 83       	std	Y+1, r25	; 0x01
    127e:	0d c0       	rjmp	.+26     	; 0x129a <vfprintf+0x124>
    1280:	83 36       	cpi	r24, 0x63	; 99
    1282:	31 f0       	breq	.+12     	; 0x1290 <vfprintf+0x11a>
    1284:	83 37       	cpi	r24, 0x73	; 115
    1286:	71 f0       	breq	.+28     	; 0x12a4 <vfprintf+0x12e>
    1288:	83 35       	cpi	r24, 0x53	; 83
    128a:	09 f0       	breq	.+2      	; 0x128e <vfprintf+0x118>
    128c:	59 c0       	rjmp	.+178    	; 0x1340 <vfprintf+0x1ca>
    128e:	21 c0       	rjmp	.+66     	; 0x12d2 <vfprintf+0x15c>
    1290:	f8 01       	movw	r30, r16
    1292:	80 81       	ld	r24, Z
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	0e 5f       	subi	r16, 0xFE	; 254
    1298:	1f 4f       	sbci	r17, 0xFF	; 255
    129a:	88 24       	eor	r8, r8
    129c:	83 94       	inc	r8
    129e:	91 2c       	mov	r9, r1
    12a0:	53 01       	movw	r10, r6
    12a2:	13 c0       	rjmp	.+38     	; 0x12ca <vfprintf+0x154>
    12a4:	28 01       	movw	r4, r16
    12a6:	f2 e0       	ldi	r31, 0x02	; 2
    12a8:	4f 0e       	add	r4, r31
    12aa:	51 1c       	adc	r5, r1
    12ac:	f8 01       	movw	r30, r16
    12ae:	a0 80       	ld	r10, Z
    12b0:	b1 80       	ldd	r11, Z+1	; 0x01
    12b2:	36 fe       	sbrs	r3, 6
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <vfprintf+0x146>
    12b6:	69 2d       	mov	r22, r9
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <vfprintf+0x14a>
    12bc:	6f ef       	ldi	r22, 0xFF	; 255
    12be:	7f ef       	ldi	r23, 0xFF	; 255
    12c0:	c5 01       	movw	r24, r10
    12c2:	0e 94 a7 0a 	call	0x154e	; 0x154e <strnlen>
    12c6:	4c 01       	movw	r8, r24
    12c8:	82 01       	movw	r16, r4
    12ca:	f3 2d       	mov	r31, r3
    12cc:	ff 77       	andi	r31, 0x7F	; 127
    12ce:	3f 2e       	mov	r3, r31
    12d0:	16 c0       	rjmp	.+44     	; 0x12fe <vfprintf+0x188>
    12d2:	28 01       	movw	r4, r16
    12d4:	22 e0       	ldi	r18, 0x02	; 2
    12d6:	42 0e       	add	r4, r18
    12d8:	51 1c       	adc	r5, r1
    12da:	f8 01       	movw	r30, r16
    12dc:	a0 80       	ld	r10, Z
    12de:	b1 80       	ldd	r11, Z+1	; 0x01
    12e0:	36 fe       	sbrs	r3, 6
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <vfprintf+0x174>
    12e4:	69 2d       	mov	r22, r9
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <vfprintf+0x178>
    12ea:	6f ef       	ldi	r22, 0xFF	; 255
    12ec:	7f ef       	ldi	r23, 0xFF	; 255
    12ee:	c5 01       	movw	r24, r10
    12f0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <strnlen_P>
    12f4:	4c 01       	movw	r8, r24
    12f6:	f3 2d       	mov	r31, r3
    12f8:	f0 68       	ori	r31, 0x80	; 128
    12fa:	3f 2e       	mov	r3, r31
    12fc:	82 01       	movw	r16, r4
    12fe:	33 fc       	sbrc	r3, 3
    1300:	1b c0       	rjmp	.+54     	; 0x1338 <vfprintf+0x1c2>
    1302:	82 2d       	mov	r24, r2
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	88 16       	cp	r8, r24
    1308:	99 06       	cpc	r9, r25
    130a:	b0 f4       	brcc	.+44     	; 0x1338 <vfprintf+0x1c2>
    130c:	b6 01       	movw	r22, r12
    130e:	80 e2       	ldi	r24, 0x20	; 32
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fputc>
    1316:	2a 94       	dec	r2
    1318:	f4 cf       	rjmp	.-24     	; 0x1302 <vfprintf+0x18c>
    131a:	f5 01       	movw	r30, r10
    131c:	37 fc       	sbrc	r3, 7
    131e:	85 91       	lpm	r24, Z+
    1320:	37 fe       	sbrs	r3, 7
    1322:	81 91       	ld	r24, Z+
    1324:	5f 01       	movw	r10, r30
    1326:	b6 01       	movw	r22, r12
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fputc>
    132e:	21 10       	cpse	r2, r1
    1330:	2a 94       	dec	r2
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	82 1a       	sub	r8, r18
    1336:	91 08       	sbc	r9, r1
    1338:	81 14       	cp	r8, r1
    133a:	91 04       	cpc	r9, r1
    133c:	71 f7       	brne	.-36     	; 0x131a <vfprintf+0x1a4>
    133e:	e8 c0       	rjmp	.+464    	; 0x1510 <vfprintf+0x39a>
    1340:	84 36       	cpi	r24, 0x64	; 100
    1342:	11 f0       	breq	.+4      	; 0x1348 <vfprintf+0x1d2>
    1344:	89 36       	cpi	r24, 0x69	; 105
    1346:	41 f5       	brne	.+80     	; 0x1398 <vfprintf+0x222>
    1348:	f8 01       	movw	r30, r16
    134a:	37 fe       	sbrs	r3, 7
    134c:	07 c0       	rjmp	.+14     	; 0x135c <vfprintf+0x1e6>
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	0c 5f       	subi	r16, 0xFC	; 252
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	08 c0       	rjmp	.+16     	; 0x136c <vfprintf+0x1f6>
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	07 2e       	mov	r0, r23
    1362:	00 0c       	add	r0, r0
    1364:	88 0b       	sbc	r24, r24
    1366:	99 0b       	sbc	r25, r25
    1368:	0e 5f       	subi	r16, 0xFE	; 254
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
    136c:	f3 2d       	mov	r31, r3
    136e:	ff 76       	andi	r31, 0x6F	; 111
    1370:	3f 2e       	mov	r3, r31
    1372:	97 ff       	sbrs	r25, 7
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <vfprintf+0x212>
    1376:	90 95       	com	r25
    1378:	80 95       	com	r24
    137a:	70 95       	com	r23
    137c:	61 95       	neg	r22
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	8f 4f       	sbci	r24, 0xFF	; 255
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	f0 68       	ori	r31, 0x80	; 128
    1386:	3f 2e       	mov	r3, r31
    1388:	2a e0       	ldi	r18, 0x0A	; 10
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	a3 01       	movw	r20, r6
    138e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__ultoa_invert>
    1392:	88 2e       	mov	r8, r24
    1394:	86 18       	sub	r8, r6
    1396:	45 c0       	rjmp	.+138    	; 0x1422 <vfprintf+0x2ac>
    1398:	85 37       	cpi	r24, 0x75	; 117
    139a:	31 f4       	brne	.+12     	; 0x13a8 <vfprintf+0x232>
    139c:	23 2d       	mov	r18, r3
    139e:	2f 7e       	andi	r18, 0xEF	; 239
    13a0:	b2 2e       	mov	r11, r18
    13a2:	2a e0       	ldi	r18, 0x0A	; 10
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	25 c0       	rjmp	.+74     	; 0x13f2 <vfprintf+0x27c>
    13a8:	93 2d       	mov	r25, r3
    13aa:	99 7f       	andi	r25, 0xF9	; 249
    13ac:	b9 2e       	mov	r11, r25
    13ae:	8f 36       	cpi	r24, 0x6F	; 111
    13b0:	c1 f0       	breq	.+48     	; 0x13e2 <vfprintf+0x26c>
    13b2:	18 f4       	brcc	.+6      	; 0x13ba <vfprintf+0x244>
    13b4:	88 35       	cpi	r24, 0x58	; 88
    13b6:	79 f0       	breq	.+30     	; 0x13d6 <vfprintf+0x260>
    13b8:	b5 c0       	rjmp	.+362    	; 0x1524 <vfprintf+0x3ae>
    13ba:	80 37       	cpi	r24, 0x70	; 112
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <vfprintf+0x24e>
    13be:	88 37       	cpi	r24, 0x78	; 120
    13c0:	21 f0       	breq	.+8      	; 0x13ca <vfprintf+0x254>
    13c2:	b0 c0       	rjmp	.+352    	; 0x1524 <vfprintf+0x3ae>
    13c4:	e9 2f       	mov	r30, r25
    13c6:	e0 61       	ori	r30, 0x10	; 16
    13c8:	be 2e       	mov	r11, r30
    13ca:	b4 fe       	sbrs	r11, 4
    13cc:	0d c0       	rjmp	.+26     	; 0x13e8 <vfprintf+0x272>
    13ce:	fb 2d       	mov	r31, r11
    13d0:	f4 60       	ori	r31, 0x04	; 4
    13d2:	bf 2e       	mov	r11, r31
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <vfprintf+0x272>
    13d6:	34 fe       	sbrs	r3, 4
    13d8:	0a c0       	rjmp	.+20     	; 0x13ee <vfprintf+0x278>
    13da:	29 2f       	mov	r18, r25
    13dc:	26 60       	ori	r18, 0x06	; 6
    13de:	b2 2e       	mov	r11, r18
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <vfprintf+0x278>
    13e2:	28 e0       	ldi	r18, 0x08	; 8
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <vfprintf+0x27c>
    13e8:	20 e1       	ldi	r18, 0x10	; 16
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <vfprintf+0x27c>
    13ee:	20 e1       	ldi	r18, 0x10	; 16
    13f0:	32 e0       	ldi	r19, 0x02	; 2
    13f2:	f8 01       	movw	r30, r16
    13f4:	b7 fe       	sbrs	r11, 7
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <vfprintf+0x290>
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	0c 5f       	subi	r16, 0xFC	; 252
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <vfprintf+0x29c>
    1406:	60 81       	ld	r22, Z
    1408:	71 81       	ldd	r23, Z+1	; 0x01
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 5f       	subi	r16, 0xFE	; 254
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
    1412:	a3 01       	movw	r20, r6
    1414:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__ultoa_invert>
    1418:	88 2e       	mov	r8, r24
    141a:	86 18       	sub	r8, r6
    141c:	fb 2d       	mov	r31, r11
    141e:	ff 77       	andi	r31, 0x7F	; 127
    1420:	3f 2e       	mov	r3, r31
    1422:	36 fe       	sbrs	r3, 6
    1424:	0d c0       	rjmp	.+26     	; 0x1440 <vfprintf+0x2ca>
    1426:	23 2d       	mov	r18, r3
    1428:	2e 7f       	andi	r18, 0xFE	; 254
    142a:	a2 2e       	mov	r10, r18
    142c:	89 14       	cp	r8, r9
    142e:	58 f4       	brcc	.+22     	; 0x1446 <vfprintf+0x2d0>
    1430:	34 fe       	sbrs	r3, 4
    1432:	0b c0       	rjmp	.+22     	; 0x144a <vfprintf+0x2d4>
    1434:	32 fc       	sbrc	r3, 2
    1436:	09 c0       	rjmp	.+18     	; 0x144a <vfprintf+0x2d4>
    1438:	83 2d       	mov	r24, r3
    143a:	8e 7e       	andi	r24, 0xEE	; 238
    143c:	a8 2e       	mov	r10, r24
    143e:	05 c0       	rjmp	.+10     	; 0x144a <vfprintf+0x2d4>
    1440:	b8 2c       	mov	r11, r8
    1442:	a3 2c       	mov	r10, r3
    1444:	03 c0       	rjmp	.+6      	; 0x144c <vfprintf+0x2d6>
    1446:	b8 2c       	mov	r11, r8
    1448:	01 c0       	rjmp	.+2      	; 0x144c <vfprintf+0x2d6>
    144a:	b9 2c       	mov	r11, r9
    144c:	a4 fe       	sbrs	r10, 4
    144e:	0f c0       	rjmp	.+30     	; 0x146e <vfprintf+0x2f8>
    1450:	fe 01       	movw	r30, r28
    1452:	e8 0d       	add	r30, r8
    1454:	f1 1d       	adc	r31, r1
    1456:	80 81       	ld	r24, Z
    1458:	80 33       	cpi	r24, 0x30	; 48
    145a:	21 f4       	brne	.+8      	; 0x1464 <vfprintf+0x2ee>
    145c:	9a 2d       	mov	r25, r10
    145e:	99 7e       	andi	r25, 0xE9	; 233
    1460:	a9 2e       	mov	r10, r25
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <vfprintf+0x300>
    1464:	a2 fe       	sbrs	r10, 2
    1466:	06 c0       	rjmp	.+12     	; 0x1474 <vfprintf+0x2fe>
    1468:	b3 94       	inc	r11
    146a:	b3 94       	inc	r11
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <vfprintf+0x300>
    146e:	8a 2d       	mov	r24, r10
    1470:	86 78       	andi	r24, 0x86	; 134
    1472:	09 f0       	breq	.+2      	; 0x1476 <vfprintf+0x300>
    1474:	b3 94       	inc	r11
    1476:	a3 fc       	sbrc	r10, 3
    1478:	11 c0       	rjmp	.+34     	; 0x149c <vfprintf+0x326>
    147a:	a0 fe       	sbrs	r10, 0
    147c:	06 c0       	rjmp	.+12     	; 0x148a <vfprintf+0x314>
    147e:	b2 14       	cp	r11, r2
    1480:	88 f4       	brcc	.+34     	; 0x14a4 <vfprintf+0x32e>
    1482:	28 0c       	add	r2, r8
    1484:	92 2c       	mov	r9, r2
    1486:	9b 18       	sub	r9, r11
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <vfprintf+0x330>
    148a:	b2 14       	cp	r11, r2
    148c:	60 f4       	brcc	.+24     	; 0x14a6 <vfprintf+0x330>
    148e:	b6 01       	movw	r22, r12
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fputc>
    1498:	b3 94       	inc	r11
    149a:	f7 cf       	rjmp	.-18     	; 0x148a <vfprintf+0x314>
    149c:	b2 14       	cp	r11, r2
    149e:	18 f4       	brcc	.+6      	; 0x14a6 <vfprintf+0x330>
    14a0:	2b 18       	sub	r2, r11
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <vfprintf+0x332>
    14a4:	98 2c       	mov	r9, r8
    14a6:	21 2c       	mov	r2, r1
    14a8:	a4 fe       	sbrs	r10, 4
    14aa:	10 c0       	rjmp	.+32     	; 0x14cc <vfprintf+0x356>
    14ac:	b6 01       	movw	r22, r12
    14ae:	80 e3       	ldi	r24, 0x30	; 48
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fputc>
    14b6:	a2 fe       	sbrs	r10, 2
    14b8:	17 c0       	rjmp	.+46     	; 0x14e8 <vfprintf+0x372>
    14ba:	a1 fc       	sbrc	r10, 1
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <vfprintf+0x34e>
    14be:	88 e7       	ldi	r24, 0x78	; 120
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <vfprintf+0x352>
    14c4:	88 e5       	ldi	r24, 0x58	; 88
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	b6 01       	movw	r22, r12
    14ca:	0c c0       	rjmp	.+24     	; 0x14e4 <vfprintf+0x36e>
    14cc:	8a 2d       	mov	r24, r10
    14ce:	86 78       	andi	r24, 0x86	; 134
    14d0:	59 f0       	breq	.+22     	; 0x14e8 <vfprintf+0x372>
    14d2:	a1 fe       	sbrs	r10, 1
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0x364>
    14d6:	8b e2       	ldi	r24, 0x2B	; 43
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <vfprintf+0x366>
    14da:	80 e2       	ldi	r24, 0x20	; 32
    14dc:	a7 fc       	sbrc	r10, 7
    14de:	8d e2       	ldi	r24, 0x2D	; 45
    14e0:	b6 01       	movw	r22, r12
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fputc>
    14e8:	89 14       	cp	r8, r9
    14ea:	38 f4       	brcc	.+14     	; 0x14fa <vfprintf+0x384>
    14ec:	b6 01       	movw	r22, r12
    14ee:	80 e3       	ldi	r24, 0x30	; 48
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fputc>
    14f6:	9a 94       	dec	r9
    14f8:	f7 cf       	rjmp	.-18     	; 0x14e8 <vfprintf+0x372>
    14fa:	8a 94       	dec	r8
    14fc:	f3 01       	movw	r30, r6
    14fe:	e8 0d       	add	r30, r8
    1500:	f1 1d       	adc	r31, r1
    1502:	80 81       	ld	r24, Z
    1504:	b6 01       	movw	r22, r12
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fputc>
    150c:	81 10       	cpse	r8, r1
    150e:	f5 cf       	rjmp	.-22     	; 0x14fa <vfprintf+0x384>
    1510:	22 20       	and	r2, r2
    1512:	09 f4       	brne	.+2      	; 0x1516 <vfprintf+0x3a0>
    1514:	42 ce       	rjmp	.-892    	; 0x119a <vfprintf+0x24>
    1516:	b6 01       	movw	r22, r12
    1518:	80 e2       	ldi	r24, 0x20	; 32
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <fputc>
    1520:	2a 94       	dec	r2
    1522:	f6 cf       	rjmp	.-20     	; 0x1510 <vfprintf+0x39a>
    1524:	f6 01       	movw	r30, r12
    1526:	86 81       	ldd	r24, Z+6	; 0x06
    1528:	97 81       	ldd	r25, Z+7	; 0x07
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <vfprintf+0x3ba>
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	9f ef       	ldi	r25, 0xFF	; 255
    1530:	2b 96       	adiw	r28, 0x0b	; 11
    1532:	e2 e1       	ldi	r30, 0x12	; 18
    1534:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__epilogue_restores__>

00001538 <strnlen_P>:
    1538:	fc 01       	movw	r30, r24
    153a:	05 90       	lpm	r0, Z+
    153c:	61 50       	subi	r22, 0x01	; 1
    153e:	70 40       	sbci	r23, 0x00	; 0
    1540:	01 10       	cpse	r0, r1
    1542:	d8 f7       	brcc	.-10     	; 0x153a <strnlen_P+0x2>
    1544:	80 95       	com	r24
    1546:	90 95       	com	r25
    1548:	8e 0f       	add	r24, r30
    154a:	9f 1f       	adc	r25, r31
    154c:	08 95       	ret

0000154e <strnlen>:
    154e:	fc 01       	movw	r30, r24
    1550:	61 50       	subi	r22, 0x01	; 1
    1552:	70 40       	sbci	r23, 0x00	; 0
    1554:	01 90       	ld	r0, Z+
    1556:	01 10       	cpse	r0, r1
    1558:	d8 f7       	brcc	.-10     	; 0x1550 <strnlen+0x2>
    155a:	80 95       	com	r24
    155c:	90 95       	com	r25
    155e:	8e 0f       	add	r24, r30
    1560:	9f 1f       	adc	r25, r31
    1562:	08 95       	ret

00001564 <fputc>:
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	fb 01       	movw	r30, r22
    156e:	23 81       	ldd	r18, Z+3	; 0x03
    1570:	21 fd       	sbrc	r18, 1
    1572:	03 c0       	rjmp	.+6      	; 0x157a <fputc+0x16>
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	9f ef       	ldi	r25, 0xFF	; 255
    1578:	2c c0       	rjmp	.+88     	; 0x15d2 <fputc+0x6e>
    157a:	22 ff       	sbrs	r18, 2
    157c:	16 c0       	rjmp	.+44     	; 0x15aa <fputc+0x46>
    157e:	46 81       	ldd	r20, Z+6	; 0x06
    1580:	57 81       	ldd	r21, Z+7	; 0x07
    1582:	24 81       	ldd	r18, Z+4	; 0x04
    1584:	35 81       	ldd	r19, Z+5	; 0x05
    1586:	42 17       	cp	r20, r18
    1588:	53 07       	cpc	r21, r19
    158a:	44 f4       	brge	.+16     	; 0x159c <fputc+0x38>
    158c:	a0 81       	ld	r26, Z
    158e:	b1 81       	ldd	r27, Z+1	; 0x01
    1590:	9d 01       	movw	r18, r26
    1592:	2f 5f       	subi	r18, 0xFF	; 255
    1594:	3f 4f       	sbci	r19, 0xFF	; 255
    1596:	31 83       	std	Z+1, r19	; 0x01
    1598:	20 83       	st	Z, r18
    159a:	8c 93       	st	X, r24
    159c:	26 81       	ldd	r18, Z+6	; 0x06
    159e:	37 81       	ldd	r19, Z+7	; 0x07
    15a0:	2f 5f       	subi	r18, 0xFF	; 255
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	37 83       	std	Z+7, r19	; 0x07
    15a6:	26 83       	std	Z+6, r18	; 0x06
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <fputc+0x6e>
    15aa:	8b 01       	movw	r16, r22
    15ac:	ec 01       	movw	r28, r24
    15ae:	fb 01       	movw	r30, r22
    15b0:	00 84       	ldd	r0, Z+8	; 0x08
    15b2:	f1 85       	ldd	r31, Z+9	; 0x09
    15b4:	e0 2d       	mov	r30, r0
    15b6:	09 95       	icall
    15b8:	89 2b       	or	r24, r25
    15ba:	e1 f6       	brne	.-72     	; 0x1574 <fputc+0x10>
    15bc:	d8 01       	movw	r26, r16
    15be:	16 96       	adiw	r26, 0x06	; 6
    15c0:	8d 91       	ld	r24, X+
    15c2:	9c 91       	ld	r25, X
    15c4:	17 97       	sbiw	r26, 0x07	; 7
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	17 96       	adiw	r26, 0x07	; 7
    15ca:	9c 93       	st	X, r25
    15cc:	8e 93       	st	-X, r24
    15ce:	16 97       	sbiw	r26, 0x06	; 6
    15d0:	ce 01       	movw	r24, r28
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	08 95       	ret

000015dc <__ultoa_invert>:
    15dc:	fa 01       	movw	r30, r20
    15de:	aa 27       	eor	r26, r26
    15e0:	28 30       	cpi	r18, 0x08	; 8
    15e2:	51 f1       	breq	.+84     	; 0x1638 <__ultoa_invert+0x5c>
    15e4:	20 31       	cpi	r18, 0x10	; 16
    15e6:	81 f1       	breq	.+96     	; 0x1648 <__ultoa_invert+0x6c>
    15e8:	e8 94       	clt
    15ea:	6f 93       	push	r22
    15ec:	6e 7f       	andi	r22, 0xFE	; 254
    15ee:	6e 5f       	subi	r22, 0xFE	; 254
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	8f 4f       	sbci	r24, 0xFF	; 255
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	af 4f       	sbci	r26, 0xFF	; 255
    15f8:	b1 e0       	ldi	r27, 0x01	; 1
    15fa:	3e d0       	rcall	.+124    	; 0x1678 <__ultoa_invert+0x9c>
    15fc:	b4 e0       	ldi	r27, 0x04	; 4
    15fe:	3c d0       	rcall	.+120    	; 0x1678 <__ultoa_invert+0x9c>
    1600:	67 0f       	add	r22, r23
    1602:	78 1f       	adc	r23, r24
    1604:	89 1f       	adc	r24, r25
    1606:	9a 1f       	adc	r25, r26
    1608:	a1 1d       	adc	r26, r1
    160a:	68 0f       	add	r22, r24
    160c:	79 1f       	adc	r23, r25
    160e:	8a 1f       	adc	r24, r26
    1610:	91 1d       	adc	r25, r1
    1612:	a1 1d       	adc	r26, r1
    1614:	6a 0f       	add	r22, r26
    1616:	71 1d       	adc	r23, r1
    1618:	81 1d       	adc	r24, r1
    161a:	91 1d       	adc	r25, r1
    161c:	a1 1d       	adc	r26, r1
    161e:	20 d0       	rcall	.+64     	; 0x1660 <__ultoa_invert+0x84>
    1620:	09 f4       	brne	.+2      	; 0x1624 <__ultoa_invert+0x48>
    1622:	68 94       	set
    1624:	3f 91       	pop	r19
    1626:	2a e0       	ldi	r18, 0x0A	; 10
    1628:	26 9f       	mul	r18, r22
    162a:	11 24       	eor	r1, r1
    162c:	30 19       	sub	r19, r0
    162e:	30 5d       	subi	r19, 0xD0	; 208
    1630:	31 93       	st	Z+, r19
    1632:	de f6       	brtc	.-74     	; 0x15ea <__ultoa_invert+0xe>
    1634:	cf 01       	movw	r24, r30
    1636:	08 95       	ret
    1638:	46 2f       	mov	r20, r22
    163a:	47 70       	andi	r20, 0x07	; 7
    163c:	40 5d       	subi	r20, 0xD0	; 208
    163e:	41 93       	st	Z+, r20
    1640:	b3 e0       	ldi	r27, 0x03	; 3
    1642:	0f d0       	rcall	.+30     	; 0x1662 <__ultoa_invert+0x86>
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__ultoa_invert+0x5c>
    1646:	f6 cf       	rjmp	.-20     	; 0x1634 <__ultoa_invert+0x58>
    1648:	46 2f       	mov	r20, r22
    164a:	4f 70       	andi	r20, 0x0F	; 15
    164c:	40 5d       	subi	r20, 0xD0	; 208
    164e:	4a 33       	cpi	r20, 0x3A	; 58
    1650:	18 f0       	brcs	.+6      	; 0x1658 <__ultoa_invert+0x7c>
    1652:	49 5d       	subi	r20, 0xD9	; 217
    1654:	31 fd       	sbrc	r19, 1
    1656:	40 52       	subi	r20, 0x20	; 32
    1658:	41 93       	st	Z+, r20
    165a:	02 d0       	rcall	.+4      	; 0x1660 <__ultoa_invert+0x84>
    165c:	a9 f7       	brne	.-22     	; 0x1648 <__ultoa_invert+0x6c>
    165e:	ea cf       	rjmp	.-44     	; 0x1634 <__ultoa_invert+0x58>
    1660:	b4 e0       	ldi	r27, 0x04	; 4
    1662:	a6 95       	lsr	r26
    1664:	97 95       	ror	r25
    1666:	87 95       	ror	r24
    1668:	77 95       	ror	r23
    166a:	67 95       	ror	r22
    166c:	ba 95       	dec	r27
    166e:	c9 f7       	brne	.-14     	; 0x1662 <__ultoa_invert+0x86>
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	61 05       	cpc	r22, r1
    1674:	71 05       	cpc	r23, r1
    1676:	08 95       	ret
    1678:	9b 01       	movw	r18, r22
    167a:	ac 01       	movw	r20, r24
    167c:	0a 2e       	mov	r0, r26
    167e:	06 94       	lsr	r0
    1680:	57 95       	ror	r21
    1682:	47 95       	ror	r20
    1684:	37 95       	ror	r19
    1686:	27 95       	ror	r18
    1688:	ba 95       	dec	r27
    168a:	c9 f7       	brne	.-14     	; 0x167e <__ultoa_invert+0xa2>
    168c:	62 0f       	add	r22, r18
    168e:	73 1f       	adc	r23, r19
    1690:	84 1f       	adc	r24, r20
    1692:	95 1f       	adc	r25, r21
    1694:	a0 1d       	adc	r26, r0
    1696:	08 95       	ret

00001698 <__prologue_saves__>:
    1698:	2f 92       	push	r2
    169a:	3f 92       	push	r3
    169c:	4f 92       	push	r4
    169e:	5f 92       	push	r5
    16a0:	6f 92       	push	r6
    16a2:	7f 92       	push	r7
    16a4:	8f 92       	push	r8
    16a6:	9f 92       	push	r9
    16a8:	af 92       	push	r10
    16aa:	bf 92       	push	r11
    16ac:	cf 92       	push	r12
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	ca 1b       	sub	r28, r26
    16c2:	db 0b       	sbc	r29, r27
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	09 94       	ijmp

000016d0 <__epilogue_restores__>:
    16d0:	2a 88       	ldd	r2, Y+18	; 0x12
    16d2:	39 88       	ldd	r3, Y+17	; 0x11
    16d4:	48 88       	ldd	r4, Y+16	; 0x10
    16d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    16d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    16da:	7d 84       	ldd	r7, Y+13	; 0x0d
    16dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    16de:	9b 84       	ldd	r9, Y+11	; 0x0b
    16e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    16e2:	b9 84       	ldd	r11, Y+9	; 0x09
    16e4:	c8 84       	ldd	r12, Y+8	; 0x08
    16e6:	df 80       	ldd	r13, Y+7	; 0x07
    16e8:	ee 80       	ldd	r14, Y+6	; 0x06
    16ea:	fd 80       	ldd	r15, Y+5	; 0x05
    16ec:	0c 81       	ldd	r16, Y+4	; 0x04
    16ee:	1b 81       	ldd	r17, Y+3	; 0x03
    16f0:	aa 81       	ldd	r26, Y+2	; 0x02
    16f2:	b9 81       	ldd	r27, Y+1	; 0x01
    16f4:	ce 0f       	add	r28, r30
    16f6:	d1 1d       	adc	r29, r1
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	ed 01       	movw	r28, r26
    1704:	08 95       	ret

00001706 <_exit>:
    1706:	f8 94       	cli

00001708 <__stop_program>:
    1708:	ff cf       	rjmp	.-2      	; 0x1708 <__stop_program>
